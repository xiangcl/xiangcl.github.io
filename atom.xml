<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向常乐的Blog</title>
  <subtitle>知足者 常乐也！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiangcl.com/"/>
  <updated>2017-05-20T09:16:08.427Z</updated>
  <id>http://xiangcl.com/</id>
  
  <author>
    <name>向常乐</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>五：CentOS7安装出现Warning</title>
    <link href="http://xiangcl.com/linux-collection/linux-problem-fives.html"/>
    <id>http://xiangcl.com/linux-collection/linux-problem-fives.html</id>
    <published>2017-05-20T09:16:08.427Z</published>
    <updated>2017-05-20T09:16:08.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="U盘安装CentOS-7提示-“Warning-dev-root-does-not-exist-could-not-boot”-解决办法"><a href="#U盘安装CentOS-7提示-“Warning-dev-root-does-not-exist-could-not-boot”-解决办法" class="headerlink" title="U盘安装CentOS 7提示 “Warning: /dev/root does not exist, could not boot” 解决办法"></a>U盘安装CentOS 7提示 “Warning: /dev/root does not exist, could not boot” 解决办法</h2><p>想将旧电脑安装CentOS7系统以作学习之用，奈何安装时出现错误，错误图示如下：</p>
<p><img src="http://oq7f5bj6k.bkt.clouddn.com/img1.jpg" alt=""></p>
<p><img src="http://oq7f5bj6k.bkt.clouddn.com/img2.jpg" alt=""></p>
<p>经多方查找、分析得知可能是启动引导不正确。</p>
<ul>
<li><p>用<code>usb writer</code>重新制作了系统盘。</p>
</li>
<li><p>制作完成后将U盘名称改为CENTOS</p>
</li>
<li><p>进入安装界面时按<code>e</code>键，将CENTOS\x207\x20x86_64″改成 “centos”。然后<code>Ctrl+x</code>进入安装。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;U盘安装CentOS-7提示-“Warning-dev-root-does-not-exist-could-not-boot”-解决办法&quot;&gt;&lt;a href=&quot;#U盘安装CentOS-7提示-“Warning-dev-root-does-not-exist-coul
    
    </summary>
    
      <category term="Linux Problem" scheme="http://xiangcl.com/categories/Linux-Problem/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="Linux问题集" scheme="http://xiangcl.com/tags/Linux%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>GitHub使用基本流程</title>
    <link href="http://xiangcl.com/tool-config/GitHub_Uses.html"/>
    <id>http://xiangcl.com/tool-config/GitHub_Uses.html</id>
    <published>2017-05-20T09:16:08.427Z</published>
    <updated>2017-05-20T09:16:08.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化git"><a href="#初始化git" class="headerlink" title="初始化git"></a>初始化git</h1><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><ul>
<li>使用Git的第一件事就是设置你的名字和email,这些就是你在提交commit时的签名，每次提交记录里都会包含这些信息。使用git config命令进行配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]# git config --global user.name &quot;xiangcl&quot;</div><div class="line">[root@bogon ~]# git config --global user.email &quot;xiangcl_cs@qq.com&quot;</div></pre></td></tr></table></figure>
<ul>
<li>执行了上面的命令后,会在家目录(<code>/root</code>)下建立一个叫<code>.gitconfig</code>的文件（该文件为隐藏文件，需要使用<code>ls -al</code>查看到）. 内容一般像下面这样，可以使用vim或cat查看文件内容:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]# cat .gitconfig</div><div class="line">[user]</div><div class="line">name = xiangcl</div><div class="line">email = xiangcl_cs@qq.com</div></pre></td></tr></table></figure>
<ul>
<li><p>上面的配置文件就是Git全局配置的文件，一般配置方法是<code>git config --global &lt;配置名称&gt; &lt;配置的值&gt;</code>。</p>
</li>
<li><p>如果你想使项目里的某个值与前面的全局设置有区别(例如把私人邮箱地址改为工作邮箱)，你可以在项目中使用<code>git config</code>命令不带<code>--global</code>选项来设置. 这会在你当前的项目目录下创建<code>.git/config</code>，从而使用针对当前项目的配置。</p>
</li>
</ul>
<h1 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h1><h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><p>后续有时间另写一篇教程，这里不在赘述…</p>
<h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><ul>
<li>在本地创建ssh key：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ubuntu@VM-0-26-ubuntu:~$ sudo ssh-keygen -t rsa -C &quot;xiangcl_cs@qq.com&quot;</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/root/.ssh/id_rsa):</div><div class="line">Created directory &apos;/root/.ssh&apos;.</div><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved in /root/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:Ia1lou/M0ZNnLW6Dly9+Ws1kX89Uq5eF9wUBgFGChDA xiangcl_cs@qq.com</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">|  E. o..o+o....  |</div><div class="line">|   .. ....     . |</div><div class="line">|      o =     . .|</div><div class="line">|     . * .     oo|</div><div class="line">|    . . S     +.*|</div><div class="line">|     . . . . =.=B|</div><div class="line">|      o +.+.o.oo=|</div><div class="line">|     + ..=*o. .  |</div><div class="line">|      +  ++*.    |</div><div class="line">+----[SHA256]-----+</div></pre></td></tr></table></figure>
<p>显示如上则表示创建成功。注意，上面命令中的邮箱<code>&quot;xiangcl_cs@qq.com&quot;</code>请更换为自己的邮箱，后面密钥设置密码，这里我无需设置，直接一路回车就行。</p>
<ul>
<li>设置成功会在 <code>/root/</code> 下生成一个<code>.ssh</code>文件，因为要进入 <code>/root</code> 目录，所以需要转为root身份：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ubuntu@VM-0-26-ubuntu:~$ sudo -s</div><div class="line">root@VM-0-26-ubuntu:~# cd /root</div><div class="line">root@VM-0-26-ubuntu:/root# cd .ssh/</div><div class="line">root@VM-0-26-ubuntu:/root/.ssh# ls -l</div><div class="line">total 8</div><div class="line">-rw------- 1 root root 1675 May 18 16:14 id_rsa</div><div class="line">-rw-r--r-- 1 root root  399 May 18 16:14 id_rsa.pub</div></pre></td></tr></table></figure>
<ul>
<li>打开<code>id_rsa.pub</code>,复制里面的<code>key</code></li>
<li>然后粘贴至<code>GitHub，Settings/SSH and GPG keys/New SSH key</code></li>
<li>使用 <code>ssh -T git@github.com</code> 验证是否安装成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@VM-0-26-ubuntu:~# ssh -T git@github.com</div><div class="line">The authenticity of host &apos;github.com (192.30.253.112)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">Warning: Permanently added &apos;github.com,192.30.253.112&apos; (RSA) to the list of known hosts.</div><div class="line">Hi xiangcl! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<p>按提示输入yes，看到You’ve successfully authenticated, but GitHub does not provide shell access则表示连接成功。</p>
<h1 id="获取一个Git仓库"><a href="#获取一个Git仓库" class="headerlink" title="获取一个Git仓库"></a>获取一个Git仓库</h1><p>既然我们现在把一切都设置好了，那么我们需要一个Git仓库。有两种方法可以得到它：一种是从已有的Git仓库中clone (克隆，复制)；还有一种是新建一个仓库，把未进行版本控制的文件进行版本控制。</p>
<h2 id="Clone一个仓库"><a href="#Clone一个仓库" class="headerlink" title="Clone一个仓库"></a>Clone一个仓库</h2><ul>
<li><p>为了得一个项目的拷贝(copy),我们需要知道这个项目仓库的地址(Git URL). Git能在许多协议下使用，所以Git URL可能以<code>ssh://, http(s)://, git://</code>. 有些仓库可以通过不只一种协议来访问。</p>
</li>
<li><p>这里在我的GitHub上提供的一个名字为GitTest的仓库供大家测试的公有仓库，这个仓库可以使用下面方式进行clone：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]# git clone https://github.com/xiangcl/GitTest.git</div><div class="line">正克隆到 &apos;GitTest&apos;...</div><div class="line">remote: Counting objects: 6, done.</div><div class="line">remote: Compressing objects: 100% (5/5), done.</div><div class="line">remote: Total 6 (delta 0), reused 0 (delta 0), pack-reused 0</div><div class="line">Unpacking objects: 100% (6/6), done.</div></pre></td></tr></table></figure>
<ul>
<li>clone操作完成后，会发现当前目录下多了一个GitTest的文件夹，这个文件夹里的内容就是我们刚刚clone下来的代码。由于当前<code>GitTest</code>仅是测试项目，里面仅有README.md和LICENSE文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]# cd GitTest/</div><div class="line">[root@bogon GitTest]# ls</div><div class="line">LICENSE  README.md</div></pre></td></tr></table></figure>
<h2 id="初始化一个新仓库"><a href="#初始化一个新仓库" class="headerlink" title="初始化一个新仓库"></a>初始化一个新仓库</h2><p>可以对一个已存在的文件夹用下面的命令让它置于Git的版本控制管理之下。</p>
<ul>
<li>创建代码目录project：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@bogon gitproject]# cd ~</div><div class="line"></div><div class="line">[root@bogon ~]# mkdir project</div></pre></td></tr></table></figure>
<ul>
<li>进入到代码目录，创建并初始化Git仓库：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]# cd project/</div><div class="line"></div><div class="line">[root@bogon project]# git init</div><div class="line"></div><div class="line">初始化空的 Git 版本库于 /root/project/.git/</div></pre></td></tr></table></figure>
<p>通过<code>ls -la</code>命令会发现<code>project</code>目录下会有一个名叫<code>.git</code>的目录被创建，这意味着一个仓库被初始化了。可以进入到<code>.git</code>目录查看下有哪些内容。</p>
<h1 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h1><p>git基本工作流程如下：</p>
<ol>
<li>创建或修改文件</li>
<li>使用<code>git add</code>命令添加新创建或修改的文件到本地的缓存区（Index）</li>
<li>使用<code>git commit</code>命令提交到本地代码库</li>
<li>（可选，有的时候并没有可以同步的远端代码库）使用<code>git push</code>命令将本地代码库同步到远端代码库</li>
</ol>
<ul>
<li>进入我们刚才建立的project目录，分别创建文件<code>file1，file2，file3</code>：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@bogon ~]# cd project/</div><div class="line"></div><div class="line">[root@bogon project]# touch file1 file2 file3</div></pre></td></tr></table></figure>
<ul>
<li>修改文件，可以使用vim编辑内容，也可以直接echo添加测试内容。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# echo &quot;test&quot; &gt;&gt; file1</div><div class="line"></div><div class="line">[root@bogon project]# echo &quot;test&quot; &gt;&gt; file2</div><div class="line"></div><div class="line">[root@bogon project]# echo &quot;test&quot; &gt;&gt; file3</div></pre></td></tr></table></figure>
<ul>
<li>此时可以使用<code>git status</code>命令查看当前git仓库的状态：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git status</div><div class="line"></div><div class="line"># 位于分支 master</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 初始提交</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 未跟踪的文件:</div><div class="line"></div><div class="line"># （使用 &quot;git add &lt;file&gt;...&quot; 以包含要提交的内容）</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># file1</div><div class="line"></div><div class="line"># file2</div><div class="line"></div><div class="line"># file3</div><div class="line"></div><div class="line">提交为空，但是存在尚未跟踪的文件（使用 &quot;git add&quot; 建立跟踪）</div></pre></td></tr></table></figure>
<p>可以发现，有三个文件处于未跟踪(untracked)状态，下一步我们就需要用<code>git add</code>命令将他们加入到缓存区（Index）。</p>
<ul>
<li>使用<code>git add</code>命令将新建的文件添加到：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git add file1 file2 file3</div></pre></td></tr></table></figure>
<ul>
<li>然后再次执行<code>git status</code>就会发现新的变化：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git status</div><div class="line"></div><div class="line"># 位于分支 master</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 初始提交</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 要提交的变更：</div><div class="line"></div><div class="line"># （使用 &quot;git rm --cached &lt;file&gt;...&quot; 撤出暂存区）</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 新文件： file1</div><div class="line"></div><div class="line"># 新文件： file2</div><div class="line"></div><div class="line"># 新文件： file3</div><div class="line"></div><div class="line">#</div></pre></td></tr></table></figure>
<ul>
<li>你现在为commit做好了准备，你可以使用 <code>git diff</code> 命令再加上 –cached 参数，看看缓存区中哪些文件被修改了。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git diff --cached</div></pre></td></tr></table></figure>
<p>如果没有<code>--cached</code>参数，<code>git diff</code> 会显示当前你所有已做的但没有加入到索引里的修改。</p>
<p>如果你要做进一步的修改, 那就继续做, 做完后就把新修改的文件加入到缓存区中。</p>
<ul>
<li>当所有新建，修改的文件都被添加到了缓存区，我们就要使用<code>git commit</code>提交到本地仓库：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git commit -m &quot;add 3 files&quot;</div><div class="line"></div><div class="line">[master（根提交） bbb9a52] add 3 files</div><div class="line"></div><div class="line"> 3 files changed, 3 insertions(+)</div><div class="line"></div><div class="line"> create mode 100644 file1</div><div class="line"></div><div class="line"> create mode 100644 file2</div><div class="line"></div><div class="line"> create mode 100644 file3</div></pre></td></tr></table></figure>
<p>需要使用<code>-m</code>添加本次修改的注释，完成后就会记录一个新的项目版本。</p>
<ul>
<li>除了用<code>git add</code>命令，我们还可以用下面的命令将所有没有加到缓存区的修改也一起提交，但-a命令不会添加新建的文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -a -m &quot;add 3 files&quot;</div></pre></td></tr></table></figure>
<p>再次输入<code>git status</code>查看状态，会发现当前的代码库已经没有待提交的文件了，缓存区已经被清空。</p>
<p>至此，我们完成了第一次代码提交，这次提交的代码中我们创建了三个新文件。需要注意的是如果是修改文件，也需要使用<code>git add</code>命令添加到缓存区才可以提交。如果是删除文件，则直接使用<code>git rm</code>命令删除后会自动将已删除文件的信息添加到缓存区，<code>git commit</code>提交后就会将本地仓库中的对应文件删除。</p>
<h3 id="为你的项目添加一个新的远程仓库"><a href="#为你的项目添加一个新的远程仓库" class="headerlink" title="为你的项目添加一个新的远程仓库"></a>为你的项目添加一个新的远程仓库</h3><p>本地仓库是创建完成了，现在需要与远程的仓库进行链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git remote</div><div class="line">[root@bogon project]# git remote add origin git@github.com:xiangcl/project.git</div><div class="line">[root@bogon project]# git remote -v</div><div class="line">origin	git@github.com:xiangcl/project.git (fetch)</div><div class="line">origin	git@github.com:xiangcl/project.git (push)</div></pre></td></tr></table></figure></p>
<h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p>这个时候如果本地的仓库连接到了远程Git服务器，可以使用下面的命令将本地仓库同步到远端服务器：(注意，需要与远程仓库连接)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git push -u origin master</div><div class="line">Warning: Permanently added the RSA host key for IP address &apos;192.30.255.113&apos; to the list of known hosts.</div><div class="line">Counting objects: 14, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (10/10), done.</div><div class="line">Writing objects: 100% (14/14), 1.16 KiB | 0 bytes/s, done.</div><div class="line">Total 14 (delta 2), reused 0 (delta 0)</div><div class="line">remote: Resolving deltas: 100% (2/2), done.</div><div class="line">To git@github.com:xiangcl/project.git</div><div class="line"> * [new branch]      master -&gt; master</div><div class="line">分支 master 设置为跟踪来自 origin 的远程分支 master。</div></pre></td></tr></table></figure>
<p>上面使用<code>git push</code>时带上了<code>-u</code>参数，是将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。</p>
<h3 id="从远端仓库下载新分支与数据"><a href="#从远端仓库下载新分支与数据" class="headerlink" title="从远端仓库下载新分支与数据"></a>从远端仓库下载新分支与数据</h3><ul>
<li><code>git fetch</code>会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git remote -v</div><div class="line">origin	git@github.com:xiangcl/project.git (fetch)</div><div class="line">origin	git@github.com:xiangcl/project.git (push)</div><div class="line">[root@bogon project]# git fetch origin </div><div class="line">remote: Counting objects: 3, done.</div><div class="line">remote: Compressing objects: 100% (2/2), done.</div><div class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</div><div class="line">Unpacking objects: 100% (3/3), done.</div><div class="line">来自 github.com:xiangcl/project</div><div class="line">   6c3b072..4d38d99  master     -&gt; origin/master</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>git fetch origin</code>会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。</p>
<ul>
<li>查看分支<br>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git branch -r </div><div class="line">  origin/master</div><div class="line"></div><div class="line">[root@bogon project]# git branch -a</div><div class="line">* master</div><div class="line">  remotes/origin/master</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面命令表示，本地主机的当前分支是master，远程分支是origin/master。</p>
<ul>
<li>取回远程主机的更新以后，可以在它的基础上，使用<code>git checkout</code>命令创建一个新的分支。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git checkout -b newBrack origin/master </div><div class="line">分支 newBrack 设置为跟踪来自 origin 的远程分支 master。</div><div class="line">切换到一个新分支 &apos;newBrack&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面命令表示，在origin/master的基础上，创建一个新分支。</p>
<ul>
<li>此外，也可以使用<code>git merge</code>命令或者<code>git rebase</code>命令，在本地分支上合并远程分支。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git merge origin/master </div><div class="line">Already up-to-date.</div><div class="line"></div><div class="line">[root@bogon project]# ls</div><div class="line">file1  file2  file3  README.md</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面命令表示在当前分支上，合并origin/master。此时使用<code>ls</code>就可以查看到我刚刚在仓库段创建的README.md文件了</p>
<h1 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h1><p>Git的分支可以让你在主线（master分支）之外进行代码提交，同时又不会影响代码库主线。分支的作用体现在多人协作开发中，比如一个团队开发软件，你负责独立的一个功能需要一个月的时间来完成，你就可以创建一个分支，只把该功能的代码提交到这个分支，而其他同事仍然可以继续使用主线开发，你每天的提交不会对他们造成任何影响。当你完成功能后，测试通过再把你的功能分支合并到主线。</p>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul>
<li>一个Git仓库可以维护很多开发分支。现在我们来创建一个新的叫 experimental的分支：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git branch experimental</div></pre></td></tr></table></figure>
<ul>
<li>运行git branch命令可以查看当前的分支列表，已经目前的开发环境处在哪个分支上：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git branch</div><div class="line">  experimental</div><div class="line">* master</div></pre></td></tr></table></figure>
<ul>
<li>experimental 分支是你刚才创建的，master分支是Git系统默认创建的主分支。星号标识了你当工作在哪个分支下，输入git checkout 分支名可以切换到其他分支：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git checkout experimental</div><div class="line">切换到分支 &apos;experimental&apos;</div></pre></td></tr></table></figure>
<ul>
<li>切换到experimental分支，切换完成后，先编辑里面的一个文件，再提交(commit)改动，最后切换回 “master”分支：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# echo &quot;update&quot; &gt;&gt; file1 # 修改file1文件</div><div class="line">[root@bogon project]# git status # 使用 git status 查看当前状态</div><div class="line"># 位于分支 experimental</div><div class="line"># 尚未暂存以备提交的变更：</div><div class="line"># （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）</div><div class="line"># （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</div><div class="line">#</div><div class="line"># 修改： file1</div><div class="line">#</div><div class="line">修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）</div><div class="line">[root@bogon project]# git add file1 # 添加并提交file1的更改</div><div class="line">[root@bogon project]# git commit -m &quot;update file1&quot;</div><div class="line">[experimental 3251fbe] update file1</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line">[root@bogon project]# cat file1 #查看file1文件的内容</div><div class="line">test</div><div class="line">update</div><div class="line">[root@bogon project]# git checkout master #切换至master分支</div><div class="line"></div><div class="line">切换到分支 &apos;master&apos;</div></pre></td></tr></table></figure>
<p>查看下file1中的内容会发现刚才做的修改已经看不到了。因为刚才的修改时在experimental分支下，现在切换回了master分支，目录下的文件都是master分支上的文件了。</p>
<ul>
<li>现在可以在master分支下再作一些不同的修改:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# echo &apos;update again&apos; &gt;&gt; file2 #修改file2文件</div><div class="line"></div><div class="line">[root@bogon project]# git status #查看当前状态</div><div class="line"></div><div class="line"># 位于分支 master</div><div class="line"></div><div class="line"># 尚未暂存以备提交的变更：</div><div class="line"></div><div class="line"># （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）</div><div class="line"></div><div class="line"># （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 修改： file2</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line">修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）</div><div class="line"></div><div class="line">[root@bogon project]# git add file2 #添加并调教file2的修改</div><div class="line"></div><div class="line">[root@bogon project]# git commit -m &quot;update file2 on master&quot;</div><div class="line"></div><div class="line">[master 7f50340] update file2 on master</div><div class="line"></div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"></div><div class="line">[root@bogon project]# cat file2 #查看file2的修改</div><div class="line"></div><div class="line">test</div><div class="line"></div><div class="line">update again</div></pre></td></tr></table></figure>
<p>这时，两个分支就有了各自不同的修改，分支的内容都已经不同，如何将多个分支进行合并呢？</p>
<ul>
<li>可以通过下面的git merge命令来合并experimental到主线分支master:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git checkout master # 切换至master 分支</div><div class="line"></div><div class="line">已经位于 &apos;master&apos;</div><div class="line"></div><div class="line">[root@bogon project]# git merge -m &quot;merge experimental branch&quot; experimental #将 experimental 分支合并至master分区</div><div class="line"></div><div class="line">Merge made by the &apos;recursive&apos; strategy.</div><div class="line"></div><div class="line"> file1 | 1 +</div><div class="line"></div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
<p>-m参数仍然是需要填写合并的注释信息。</p>
<p>由于两个branch修改了两个不同的文件，所以合并时不会有冲突，执行上面的命令后合并就完成了。</p>
<ul>
<li>如果有冲突，比如两个分支都改了一个文件file3，则合并时会失败。首先我们在master分支上修改file3文件并提交：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git checkout master # 切换至 master 分区</div><div class="line"></div><div class="line">已经位于 &apos;master&apos;</div><div class="line"></div><div class="line">[root@bogon project]# echo &quot;master:update file3&quot; &gt;&gt; file3 # 修改 file3 文件</div><div class="line"></div><div class="line">[root@bogon project]# git status # 查看当前状态</div><div class="line"></div><div class="line"># 位于分支 master</div><div class="line"></div><div class="line"># 尚未暂存以备提交的变更：</div><div class="line"></div><div class="line"># （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）</div><div class="line"></div><div class="line"># （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 修改： file3</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line">修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）</div><div class="line"></div><div class="line">[root@bogon project]# git commit -a -m &apos;update file3 on master&apos; #提交至master分区</div><div class="line"></div><div class="line">[master 2922456] update file3 on master</div><div class="line"></div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"></div><div class="line">[root@bogon project]# git status #在次查看状态</div><div class="line"></div><div class="line"># 位于分支 master</div><div class="line"></div><div class="line">无文件要提交，干净的工作区</div></pre></td></tr></table></figure>
<ul>
<li>然后切换到experimental，修改file3并提交：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git checkout experimental # 切换至 experimental 分支</div><div class="line">切换到分支 &apos;experimental&apos;</div><div class="line">[root@bogon project]# echo &quot;experimental: update file3&quot; &gt;&gt; file3 # 修改 file3 文本</div><div class="line">[root@bogon project]# git commit -a -m &apos;update file3 on experimental&apos; # 提交至experimental 分支</div><div class="line">[experimental e511488] update file3 on experimental</div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
<ul>
<li>切换到master进行合并：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git checkout master # 切换至 master 分支</div><div class="line">切换到分支 &apos;master&apos;</div><div class="line">[root@bogon project]# git merge experimental # 合并分支</div><div class="line">自动合并 file3</div><div class="line">冲突（内容）：合并冲突于 file3</div><div class="line">自动合并失败，修正冲突然后提交修正的结果。</div></pre></td></tr></table></figure>
<ul>
<li>合并失败后先用git status查看状态，会发现file3显示为both modified，查看file3内容会发现：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git status #查看状态</div><div class="line"># 位于分支 master</div><div class="line"># 您有尚未合并的路径。</div><div class="line"># （解决冲突并运行 &quot;git commit&quot;）</div><div class="line">#</div><div class="line"># 未合并的路径：</div><div class="line"># （使用 &quot;git add &lt;file&gt;...&quot; 标记解决方案）</div><div class="line">#</div><div class="line"># 双方修改： file3</div><div class="line">#</div><div class="line">修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）</div><div class="line">[root@bogon project]# cat file3 # 查看产生冲突的文件</div><div class="line">test</div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class="line">master:update file3</div><div class="line">=======</div><div class="line">experimental: update file3</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; experimental</div></pre></td></tr></table></figure>
<p>上面的内容也可以使用git diff查看，先前已经提到git diff不加参数可以显示未提交到缓存区中的修改内容。</p>
<ul>
<li>可以看到冲突的内容都被添加到了file3中，我们使用vim编辑这个文件，去掉git自动产生标志冲突的&lt;&lt;&lt;&lt;&lt;&lt;等符号后，根据需要只保留我们需要的内容后保存，然后使用git add file3和git commit命令来提交合并后的file3内容，这个过程是手动解决冲突的流程。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# vim file3 # 使用 vim 打开文件修改</div><div class="line"></div><div class="line">[root@bogon project]# git status #查看状态</div><div class="line"></div><div class="line"># 位于分支 master</div><div class="line"></div><div class="line"># 您有尚未合并的路径。</div><div class="line"></div><div class="line"># （解决冲突并运行 &quot;git commit&quot;）</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 未合并的路径：</div><div class="line"></div><div class="line"># （使用 &quot;git add &lt;file&gt;...&quot; 标记解决方案）</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 双方修改： file3</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line">修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）</div><div class="line"></div><div class="line">[root@bogon project]# git add file3 # 将文件加入缓存</div><div class="line"></div><div class="line">[root@bogon project]# git status # 再次查看状态</div><div class="line"></div><div class="line"># 位于分支 master</div><div class="line"></div><div class="line"># 所有冲突已解决但您仍处于合并中。</div><div class="line"></div><div class="line"># （使用 &quot;git commit&quot; 结束合并）</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 要提交的变更：</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line"># 修改： file3</div><div class="line"></div><div class="line">#</div><div class="line"></div><div class="line">[root@bogon project]# git commit -m &apos;merge file3&apos; # 提交修改的文件</div><div class="line"></div><div class="line">[master 6b63f36] merge file3</div></pre></td></tr></table></figure>
<ul>
<li>当我们完成合并后，不再需要experimental时，可以使用下面的命令删除：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git branch -d experimental</div><div class="line">已删除分支 experimental（曾为 e511488）。</div></pre></td></tr></table></figure>
<p>git branch -d只能删除那些已经被当前分支的合并的分支. 如果你要强制删除某个分支的话就用git branch –D</p>
<h2 id="撤销一个合并"><a href="#撤销一个合并" class="headerlink" title="撤销一个合并"></a>撤销一个合并</h2><ul>
<li>如果你觉得你合并后的状态是一团乱麻，想把当前的修改都放弃，你可以用下面的命令回到合并之前的状态：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@bogon project]# git reset --hard HEAD^</div><div class="line">HEAD 现在位于 2922456 update file3 on master</div><div class="line">[root@bogon project]# cat file3</div><div class="line">test</div><div class="line">master:update file3</div></pre></td></tr></table></figure>
<h2 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h2><ul>
<li>在本机完成改动后就可以提交到远程仓库了</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>可以把 master 换成你想要推送的任何分支。 </p>
<ul>
<li>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin &lt;server&gt;</div></pre></td></tr></table></figure>
<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>
<h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><ul>
<li>要更新你的本地仓库至最新改动，执行：</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git pull</span></div></pre></td></tr></table></figure>
<p>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。</p>
<ul>
<li>要合并其他分支到你的当前分支（例如 master），执行：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge &lt;branch&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add &lt;filename&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在合并改动之前，你可以使用如下命令预览差异：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>参考：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git Pro</a>、<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">阮一峰的网络日志</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初始化git&quot;&gt;&lt;a href=&quot;#初始化git&quot; class=&quot;headerlink&quot; title=&quot;初始化git&quot;&gt;&lt;/a&gt;初始化git&lt;/h1&gt;&lt;h2 id=&quot;配置git&quot;&gt;&lt;a href=&quot;#配置git&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="工具配置" scheme="http://xiangcl.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="GitHub" scheme="http://xiangcl.com/tags/GitHub/"/>
    
      <category term="Git" scheme="http://xiangcl.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>关于登录Linux出现 bash4.2$ 的问题</title>
    <link href="http://xiangcl.com/linux-collection/linux-problem-four.html"/>
    <id>http://xiangcl.com/linux-collection/linux-problem-four.html</id>
    <published>2017-05-20T08:54:57.626Z</published>
    <updated>2017-05-20T08:54:57.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>创建用户时出现<code>bash-4.2$</code></p>
<h3 id="如图所示"><a href="#如图所示" class="headerlink" title="如图所示"></a>如图所示</h3><p><img src="http://i.imgur.com/jW7CWxs.png" alt=""></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><img src="http://i.imgur.com/CotossG.png" alt=""></p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>通过<code>useradd</code>方式创建新用户时，都会将所有的配置文件从<code>/etc/skel</code>到<code>/home</code>目录的新用户录下。但现在没有创建默认的文件。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>root远程登录</li>
<li>手动创建xiangcl的家目录<pre><code>`# mkdir /home/xiangcl
# chown xiangcl:xiangcl /home/xiangcl
# chmod 700 /home/xiangcl`
</code></pre></li>
<li>将<code>/etc/skel</code>这个目录的文件复制到<code>/home/xiangcl</code>中<pre><code>` # cd /etc/skel/
 # ls -a
 . ..  .bash_logout  .bash_profile .bashrc  .mozilla
 # cp .bash_logout  /home/xiangcl/
 # cp .bash_profile  /home/xiangcl/
 # cp .bashrc  /home/xiangcl`
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;创建用户时出现&lt;code&gt;bash-4.2$&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;如图所示&quot;&gt;&lt;a href=&quot;#如图所示&quot; class=
    
    </summary>
    
      <category term="Linux Problem" scheme="http://xiangcl.com/categories/Linux-Problem/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="Linux问题集" scheme="http://xiangcl.com/tags/Linux%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>解决linux：vim的退格删除键不能用</title>
    <link href="http://xiangcl.com/linux/vim-problem-two.html"/>
    <id>http://xiangcl.com/linux/vim-problem-two.html</id>
    <published>2017-05-20T08:53:31.555Z</published>
    <updated>2017-05-20T08:53:31.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题：linux下vim的退格删除键不能使用"><a href="#问题：linux下vim的退格删除键不能使用" class="headerlink" title="问题：linux下vim的退格删除键不能使用"></a>问题：linux下vim的退格删除键不能使用</h2><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h2><p>~/.vimrc中加入<br>set backspace=indent,eol,start<br>即可，测试时需要注销重新登录</p>
<p>或者进入vim后执行:set backspace=indent,eol,start<br>可直接生效</p>
<blockquote>
<p>摘自:<a href="http://blog.zhukunqian.com/?p=314" target="_blank" rel="external">http://blog.zhukunqian.com/?p=314</a>    对作者表示感谢，如有侵权，请联系删除。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题：linux下vim的退格删除键不能使用&quot;&gt;&lt;a href=&quot;#问题：linux下vim的退格删除键不能使用&quot; class=&quot;headerlink&quot; title=&quot;问题：linux下vim的退格删除键不能使用&quot;&gt;&lt;/a&gt;问题：linux下vim的退格删除键不能
    
    </summary>
    
      <category term="Linux Problem" scheme="http://xiangcl.com/categories/Linux-Problem/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="Linux问题集" scheme="http://xiangcl.com/tags/Linux%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>解决：sudo useradd xxx`时，出现`xxx is not in the sudoers file. This incident will be reported.</title>
    <link href="http://xiangcl.com/linux-collection/linux-problem-one.html"/>
    <id>http://xiangcl.com/linux-collection/linux-problem-one.html</id>
    <published>2017-05-20T08:53:16.732Z</published>
    <updated>2017-05-20T08:53:16.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用<code>sudo useradd xxx</code>时，出现<code>xxx is not in the sudoers file. This incident will be reported.</code></p>
<h3 id="如图所示"><a href="#如图所示" class="headerlink" title="如图所示"></a>如图所示</h3><p><img src="http://i.imgur.com/95zsyZz.png" alt=""></p>
<h2 id="当前环境"><a href="#当前环境" class="headerlink" title="当前环境"></a>当前环境</h2><p><img src="http://i.imgur.com/BYICogz.png" alt=""></p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>用户没有加入到sudo的配置文件里，可以通过编辑sudoers文件，来解决这个问题。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>切换到root用户</li>
<li>添加sudo文件的写权限<br> <code>chmod u+w /etc/sudoers</code></li>
<li>编辑sudoers文件<br> <code>vim /etc/sudoers</code><br> <code>找到 root ALL=(ALL) ALL,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是你的用户名)</code><pre><code>youuser            ALL=(ALL)                ALL
youuser           ALL=(ALL)                ALL
youuser            ALL=(ALL)                NOPASSWD: ALL
youuser           ALL=(ALL)                NOPASSWD: ALL
</code></pre><ul>
<li>第一行:允许用户youuser执行sudo命令(需要输入密码).</li>
<li>第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).</li>
<li>第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.</li>
<li>第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</li>
</ul>
</li>
<li>撤销sudoers的文件的写权限<br><code>chmod u-w /etc/sudoers</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;sudo useradd xxx&lt;/code&gt;时，出现&lt;code&gt;xxx is not in the sud
    
    </summary>
    
      <category term="Linux Problem" scheme="http://xiangcl.com/categories/Linux-Problem/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="Linux问题集" scheme="http://xiangcl.com/tags/Linux%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>解决Centos7初次开机提示Initial setup of CentOS Linux 7 (core)</title>
    <link href="http://xiangcl.com/linux-collection/linux-problem-three.html"/>
    <id>http://xiangcl.com/linux-collection/linux-problem-three.html</id>
    <published>2017-05-20T08:52:02.260Z</published>
    <updated>2017-05-20T08:52:02.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装完成centos7后出现如下提示："><a href="#安装完成centos7后出现如下提示：" class="headerlink" title="安装完成centos7后出现如下提示："></a>安装完成centos7后出现如下提示：</h2><pre><code>Initial setup of CentOS Linux 7 (core)
1) [x] Creat user 2) [!] License information
(no user will be created) (license not accepted)
Please make your choice from above [&apos;q&apos; to quit | &apos;c&apos; to continue | &apos;r&apos; to refresh]:
</code></pre><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ol>
<li>输入【1】，按Enter键阅读许可协议，</li>
<li>输入【2】，按Enter键接受许可协议，</li>
<li>输入【q】，按Enter键退出，</li>
<li>输入【yes】，按Enter键确定，</li>
<li>重启之后即可进入图形登录界面</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装完成centos7后出现如下提示：&quot;&gt;&lt;a href=&quot;#安装完成centos7后出现如下提示：&quot; class=&quot;headerlink&quot; title=&quot;安装完成centos7后出现如下提示：&quot;&gt;&lt;/a&gt;安装完成centos7后出现如下提示：&lt;/h2&gt;&lt;pre&gt;
    
    </summary>
    
      <category term="Linux Problem" scheme="http://xiangcl.com/categories/Linux-Problem/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="Linux问题集" scheme="http://xiangcl.com/tags/Linux%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>如何把图片放在一个元素的上下居中？</title>
    <link href="http://xiangcl.com/web-front-end/image-elements-center.html"/>
    <id>http://xiangcl.com/web-front-end/image-elements-center.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何把图片放在一个元素的上下居中？"><a href="#如何把图片放在一个元素的上下居中？" class="headerlink" title="如何把图片放在一个元素的上下居中？"></a>如何把图片放在一个元素的上下居中？</h2><h3 id="实现效果："><a href="#实现效果：" class="headerlink" title="实现效果："></a>实现效果：</h3><p><img src="http://i.imgur.com/TigwcKd.png" alt=""></p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;div放一个图片居中&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        .div1{
            width:250px;
            height:250px;
            border:1px solid red;
            display:table-cell; /*此元素会作为一个表格单元格显示*/
            vertical-align:middle; /*把此元素放置在父元素的中部。*/
            text-align: center;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;div1&quot;&gt;
        &lt;img src=&quot;ali.jpg&quot;&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何把图片放在一个元素的上下居中？&quot;&gt;&lt;a href=&quot;#如何把图片放在一个元素的上下居中？&quot; class=&quot;headerlink&quot; title=&quot;如何把图片放在一个元素的上下居中？&quot;&gt;&lt;/a&gt;如何把图片放在一个元素的上下居中？&lt;/h2&gt;&lt;h3 id=&quot;实现效果：
    
    </summary>
    
      <category term="Web前端" scheme="http://xiangcl.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="http://xiangcl.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html+css" scheme="http://xiangcl.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>SEO的简单优化</title>
    <link href="http://xiangcl.com/seo/simple-seo-optimization.html"/>
    <id>http://xiangcl.com/seo/simple-seo-optimization.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h1><h3 id="SEO-Search-Engine-Optimization-搜索引擎优化"><a href="#SEO-Search-Engine-Optimization-搜索引擎优化" class="headerlink" title="SEO (Search Engine Optimization) (搜索引擎优化)"></a>SEO (Search Engine Optimization) (搜索引擎优化)</h3><h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><ul>
<li>白帽SEO</li>
<li>黑帽SEO</li>
</ul>
<h2 id="白帽SEO"><a href="#白帽SEO" class="headerlink" title="白帽SEO"></a>白帽SEO</h2><h3 id="内容上的SEO："><a href="#内容上的SEO：" class="headerlink" title="内容上的SEO："></a>内容上的SEO：</h3><ul>
<li>网站标题、关键字、描述</li>
<li>网站内容优化</li>
<li><code>Robot.txt</code>文件</li>
<li>网站地图</li>
<li>增加外链接引用</li>
</ul>
<h3 id="作为前端工程师的优化方法："><a href="#作为前端工程师的优化方法：" class="headerlink" title="作为前端工程师的优化方法："></a>作为前端工程师的优化方法：</h3><ul>
<li>网站结构布局优化</li>
<li>网页代码优化</li>
</ul>
<h1 id="前端工程师与SEO"><a href="#前端工程师与SEO" class="headerlink" title="前端工程师与SEO"></a>前端工程师与SEO</h1><ul>
<li>网站结构布局优化<ul>
<li>扁平化结构<ul>
<li>控制首页链接数量</li>
<li>扁平化的目录层次</li>
<li>导航SEO优化</li>
</ul>
</li>
<li>面包屑导航<ul>
<li>让用户了解当前所处位置</li>
<li>是用户可以了解网站组织形式</li>
</ul>
</li>
<li>不可忽略的细节<ul>
<li>logo及导航条</li>
</ul>
</li>
<li>控制页面的大小</li>
</ul>
</li>
</ul>
<h1 id="网页代码优化"><a href="#网页代码优化" class="headerlink" title="网页代码优化"></a>网页代码优化</h1><ul>
<li><code>&lt;title&gt;</code>标题</li>
<li><code>&lt;meta keywords&gt;</code>关键词</li>
<li><code>&lt;meta description&gt;</code>网页描述</li>
</ul>
<h2 id="语义化代码"><a href="#语义化代码" class="headerlink" title="语义化代码"></a>语义化代码</h2><ul>
<li><code>&lt;h1&gt;~&lt;h6&gt;</code>标签多用于标题</li>
<li><code>&lt;ul&gt;</code>标签多用于无序列表</li>
<li><code>&lt;ol&gt;</code>标签多用于有序列表</li>
<li><code>&lt;dl&gt;</code>标签多用于定数据列表</li>
<li><code>&lt;em&gt;,&lt;strong&gt;</code>表示强调</li>
</ul>
<h2 id="标签的优化"><a href="#标签的优化" class="headerlink" title="标签的优化"></a>标签的优化</h2><ul>
<li><code>&lt;a&gt;</code>标签<ul>
<li><code>rel=&quot;nofollow&quot;</code> <em>是一个HTML标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接”或”不要追踪此特定链接。</em></li>
</ul>
</li>
<li><code>&lt;h1&gt;</code> 正文标题，搜索引擎喜欢h1标签。样式用css修改。</li>
<li><code>&lt;p&gt; and &lt;br&gt;</code> <em><code>&lt;p&gt;</code>标签仅仅用于段落<code>&lt;br&gt;</code>仅仅用于文本标签的换行</em></li>
<li><code>&lt;caption&gt;</code> <em><code>表格标题用&lt;caption&gt;定义</code></em></li>
<li><code>&lt;img&gt;</code> <em>应加上<code>&lt;alt&gt;</code></em></li>
<li><code>&lt;strong&gt;&lt;em&gt;与&lt;b&gt;&lt;i&gt;</code>  <em><code>&lt;strong&gt;</code>的权重高于<code>&lt;em&gt;</code>，<code>&lt;strong&gt;</code>、<code>&lt;em&gt;</code>更讨搜索引擎喜欢</em></li>
</ul>
<h1 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h1><ul>
<li>重要内容<code>HTML</code>代码放在最前面。(主要代码优先读取)</li>
<li>重要内容不要用JS输出</li>
<li>尽量使用iframe框架</li>
<li>谨慎使用<code>display:none</code>;</li>
<li>不断精简代码</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SEO优化&quot;&gt;&lt;a href=&quot;#SEO优化&quot; class=&quot;headerlink&quot; title=&quot;SEO优化&quot;&gt;&lt;/a&gt;SEO优化&lt;/h1&gt;&lt;h3 id=&quot;SEO-Search-Engine-Optimization-搜索引擎优化&quot;&gt;&lt;a href=&quot;#SEO-
    
    </summary>
    
      <category term="SEO" scheme="http://xiangcl.com/categories/SEO/"/>
    
    
      <category term="SEO" scheme="http://xiangcl.com/tags/SEO/"/>
    
      <category term="网站优化" scheme="http://xiangcl.com/tags/%E7%BD%91%E7%AB%99%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>了解GitHub</title>
    <link href="http://xiangcl.com/tool-config/know-github.html"/>
    <id>http://xiangcl.com/tool-config/know-github.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是GitHub？"><a href="#什么是GitHub？" class="headerlink" title="什么是GitHub？"></a>什么是GitHub？</h2><p>github是为开发者提供git仓库的托管服务。是一个让开发者与朋友、同事、同学及陌生人共享代码的完美场所。</p>
<h3 id="github总部：美国旧金山"><a href="#github总部：美国旧金山" class="headerlink" title="github总部：美国旧金山"></a>github总部：美国旧金山</h3><h3 id="吉祥物：octocat"><a href="#吉祥物：octocat" class="headerlink" title="吉祥物：octocat"></a>吉祥物：octocat</h3><p><img src="http://i.imgur.com/q3SOO4g.png" alt=""></p>
<h3 id="并不只是git仓库的托管服务"><a href="#并不只是git仓库的托管服务" class="headerlink" title="并不只是git仓库的托管服务"></a>并不只是git仓库的托管服务</h3><p>GitHub 除提供 Git 仓库的托管服务外，还为开发者或团队提供了一系列功能，帮助其高效率、高品质地进行代码编写。</p>
<h3 id="git与github的区别？"><a href="#git与github的区别？" class="headerlink" title="git与github的区别？"></a>git与github的区别？</h3><p>在 Git 中，开发者将源代码存入名叫“Git 仓库”的资料库中并加以使用。而GitHub则是在网络上提供 Git 仓库的一项服务。</p>
<p>也就是说，GitHub 上公开的软件源代码全都由 Git 进行管理。理解 Git，是熟练运用 GitHub 的关键所在。</p>
<h2 id="使用github会带来哪些变化？"><a href="#使用github会带来哪些变化？" class="headerlink" title="使用github会带来哪些变化？"></a>使用github会带来哪些变化？</h2><h3 id="协作形式变化"><a href="#协作形式变化" class="headerlink" title="协作形式变化"></a>协作形式变化</h3><h4 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h4><p>Pull Request 是指开发者在本地对源代码进行更改后，向 GitHub 中托管的 Git 仓库请求合并的功能。</p>
<h4 id="对特定用户进行评论"><a href="#对特定用户进行评论" class="headerlink" title="对特定用户进行评论"></a>对特定用户进行评论</h4><p>如果想让特定用户来看，只要用“ @ 用户名”的格式书写，对方便会接到通知（Notifications），查看 Issue。由于也提供了 Wiki 功能，开发者可以轻松创建文档，进行公开、共享。Wiki更新的历史记录也在Git中管理，可以让用户轻松更改。</p>
<h4 id="GitHub-Flavored-Markdown"><a href="#GitHub-Flavored-Markdown" class="headerlink" title="GitHub Flavored Markdown"></a>GitHub Flavored Markdown</h4><p>在GitHub上，用户所有用文字输入的功能都可以用 GitHub Flavored Markdown（GFM）语法进行描述。这个语法可以让标记变得简单，以此写出的评论与文档也会更容易理解。</p>
<p>随着 GitHub 的普及，正在有越来越多的服务开始兼容 Markdown语法。</p>
<h2 id="GitHub提供的主要功能"><a href="#GitHub提供的主要功能" class="headerlink" title="GitHub提供的主要功能"></a>GitHub提供的主要功能</h2><h3 id="Git仓库"><a href="#Git仓库" class="headerlink" title="Git仓库"></a>Git仓库</h3><p>一般情况下，我们可以免费建立任意个GitHub提供的Git仓库。但如果需要建立只对特定人物或只对自己公开的私有仓库，则需要付费使用。</p>
<h3 id="Organization"><a href="#Organization" class="headerlink" title="Organization"></a>Organization</h3><p>通常来说，个人使用时只要使用个人账户就足够了，但如果是公司，建议使用 Organization 账户。它的优点在于可以统一管理账户和权限，还能统一支付一些费用。</p>
<p>如果只使用公开仓库，是可以免费创建 Organization 账户的。</p>
<h3 id="lssue"><a href="#lssue" class="headerlink" title="lssue"></a>lssue</h3><p>Issue 功能，是将一个任务或问题分配给一个 Issue 进行追踪和管理的功能。</p>
<h3 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a>Wiki</h3><p>通过 Wiki 功能，任何人都能随时对一篇文章进行更改并保存，因此可以多人共同完成一篇文章。该功能常用在开发文档或手册的编写中。语法方面，可以通过GFM语法进行书写。</p>
<p>Wiki 页也是作为Git仓库进行管理的，改版的历史记录会被切实保存下来，使用者可以放心改写。由于其支持克隆至本地进行编辑，所以程序员使用时可以不必开启浏览器。</p>
<h3 id="Pull-Request-1"><a href="#Pull-Request-1" class="headerlink" title="Pull Request"></a>Pull Request</h3><p>开发者向GitHub的仓库推送更改或功能添加后，可通过Pull Request功能向别人的仓库提出申请，请求对方合并。</p>
<p>Pull Request送出后，目标仓库的管理员等人将能够查看Pull Request的内容及其中包含的代码更改。</p>
<p>同时，GitHub还提供了对Pull Request和源代码前后差别进行讨论的功能。通过此功能，可以以行为当位对源代码添加评论，让程序员之间更高效的交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是GitHub？&quot;&gt;&lt;a href=&quot;#什么是GitHub？&quot; class=&quot;headerlink&quot; title=&quot;什么是GitHub？&quot;&gt;&lt;/a&gt;什么是GitHub？&lt;/h2&gt;&lt;p&gt;github是为开发者提供git仓库的托管服务。是一个让开发者与朋友、同事、
    
    </summary>
    
      <category term="工具配置" scheme="http://xiangcl.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="GitHub" scheme="http://xiangcl.com/tags/GitHub/"/>
    
      <category term="工具使用" scheme="http://xiangcl.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>了解Git</title>
    <link href="http://xiangcl.com/tool-config/know-git.html"/>
    <id>http://xiangcl.com/tool-config/know-git.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git历史"><a href="#git历史" class="headerlink" title="git历史"></a>git历史</h2><p>git属于分散型版本管理系统，是为版本管理而设计的软件。</p>
<p>众所周知，Linux内核开源项目有着为数众广的参与者。绝大多数的Linux内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991-2002)。</p>
<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断的发展，已经成为了最大的服务器系统软件。</p>
<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的？</p>
<p>实事是，在2002年以前，世界各地的志愿者把源代码文件通过diff方式发给Linus，然后由Linus本人通过手工方式合并代码！</p>
<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>
<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>
<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>
<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。</p>
<p>开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds ）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统制订了若干目标：</p>
<ul>
<li>速度</li>
<li>简单的设计</li>
<li>对非线性开发模式的强力支持（允许上千个并行开发的分支）</li>
<li>完全分布式</li>
<li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li>
</ul>
<p>最后实际情况是这样的：Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以感受一下。</p>
<blockquote>
<p>以上故事来自Git诞生背后的一些故事</p>
</blockquote>
<h2 id="什么是版本控制？"><a href="#什么是版本控制？" class="headerlink" title="什么是版本控制？"></a>什么是版本控制？</h2><p>版本管理就是管理更新的历史记录。它为我们提供了一些在软件开发过程中必不可少的功能，例如记录一款软件添加或更改源代码的过程，回滚到特定阶段，恢复误删除的文件等。</p>
<h3 id="集中型与分散型"><a href="#集中型与分散型" class="headerlink" title="集中型与分散型"></a>集中型与分散型</h3><h4 id="集中型"><a href="#集中型" class="headerlink" title="集中型"></a>集中型</h4><p>代表：Subversion</p>
<p>图示：<br><img src="http://i.imgur.com/JFQIGUF.png" alt=""></p>
<p>将仓库集中存放在服务器之中，所以只存在一个仓库。</p>
<h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>便于管理</li>
</ul>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>环境限制</li>
<li>服务器宕机的危险</li>
<li>服务器故障可能导致数据丢失</li>
</ul>
<h4 id="分散型"><a href="#分散型" class="headerlink" title="分散型"></a>分散型</h4><p>图示：<br><img src="http://i.imgur.com/vqDb0zh.png" alt=""></p>
<p>GitHub 将仓库 Fork 给了每一个用户。 Fork 就是将 GitHub 的某个特定仓库复制到自己的账户下。 Fork 出的仓库与原仓库是两个不同的仓库，开发者可以随意编辑。</p>
<h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>不比需要远程链接仓库</li>
<li>便于开发者沟通</li>
</ul>
<h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>流程复杂</li>
<li>学习成本相对较高</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>$ sudo yum isntall git
</code></pre><h3 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h3><h4 id="设置姓名和邮箱地址"><a href="#设置姓名和邮箱地址" class="headerlink" title="设置姓名和邮箱地址"></a>设置姓名和邮箱地址</h4><pre><code>$ git config --global user.name &quot;Firstname Lastname&quot;
$ git config --global user.email &quot;your_email@example.com&quot;
</code></pre><p>这个命令，会在“ ~/.gitconfig”中以如下形式输出设置文件</p>
<pre><code>[user]
    name = Firstname Lastname
    email = your_email@example.com
</code></pre><p>这里设置的姓名和邮箱地址会用在 Git 的提交日志中。由于在 GitHub 上公开仓库时，这里的姓名和邮箱地址也会随着提交日志一同被公开。</p>
<h4 id="提高命令输出的可读性"><a href="#提高命令输出的可读性" class="headerlink" title="提高命令输出的可读性"></a>提高命令输出的可读性</h4><p>顺便一提，将 color.ui 设置为 auto 可以让命令的输出拥有更高的可读性。</p>
<pre><code>$ git config --global color.ui auto
</code></pre><p>“ ~/.gitconfig”中会增加下面一行。</p>
<pre><code>[color]
    ui = auto
</code></pre><p>这样一来，各种命令的输出就会变得更容易分辨。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git历史&quot;&gt;&lt;a href=&quot;#git历史&quot; class=&quot;headerlink&quot; title=&quot;git历史&quot;&gt;&lt;/a&gt;git历史&lt;/h2&gt;&lt;p&gt;git属于分散型版本管理系统，是为版本管理而设计的软件。&lt;/p&gt;
&lt;p&gt;众所周知，Linux内核开源项目有着为数众广
    
    </summary>
    
      <category term="工具配置" scheme="http://xiangcl.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Git" scheme="http://xiangcl.com/tags/Git/"/>
    
      <category term="工具使用" scheme="http://xiangcl.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>详解Linux用户和组的权限管理及相关命令</title>
    <link href="http://xiangcl.com/linux/linux-user-groups.html"/>
    <id>http://xiangcl.com/linux/linux-user-groups.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在Linux中，用户和组的权限管理是很基础，也是很至关重要的。本文，对这个知识点做了一次详细的梳理；</p>
</blockquote>
<h2 id="一、文件的权限主要针对3类用户定义"><a href="#一、文件的权限主要针对3类用户定义" class="headerlink" title="一、文件的权限主要针对3类用户定义"></a>一、文件的权限主要针对3类用户定义</h2><blockquote>
<p><strong>owner</strong>：属主，简写为：<strong>u</strong>；<br><strong>group</strong>：属组，简写为：<strong>g</strong>；<br><strong>other</strong>：其它，简写为：<strong>o</strong>；</p>
</blockquote>
<ul>
<li><p>每个文件针对每类访问者都定义了三种权限：</p>
<blockquote>
<ul>
<li><strong>r</strong>：Readable：<strong>可读</strong></li>
<li><strong>w</strong>：Writable：<strong>可写</strong></li>
<li><strong>x</strong>：eXcutable：<strong>可执行</strong></li>
</ul>
</blockquote>
</li>
<li><p>对<strong>文件</strong>来说以上三种权限的意义：</p>
<blockquote>
<ul>
<li><strong>r</strong>：可使用文件查看类工具获取其内容；</li>
<li><strong>w</strong>：可修改其内容；</li>
<li><strong>x</strong>：可以把此文件提请内核启动为一个进程；</li>
</ul>
</blockquote>
</li>
</ul>
<ul>
<li><p>对<strong>目录</strong>来说，以上三种权限的意义：</p>
<blockquote>
<ul>
<li><strong>r</strong>：可以使用ls查看此目录文件中的列表；</li>
<li><strong>w</strong>：可在此目录中创建文件，也可删除此目录中的文件；</li>
<li><strong>x</strong>：可以使用ls -l查看此目录中文件列表，可以cd进入此目录；</li>
</ul>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center"></th>
<th style="text-align:right"></th>
</tr>
</thead>
<tbody>
<tr>
<td>- - -</td>
<td style="text-align:center">000</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td>- - x</td>
<td style="text-align:center">001</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td>- w -</td>
<td style="text-align:center">010</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td>- w x</td>
<td style="text-align:center">011</td>
<td style="text-align:right">3</td>
</tr>
<tr>
<td>r - -</td>
<td style="text-align:center">100</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td>r - x</td>
<td style="text-align:center">101</td>
<td style="text-align:right">5</td>
</tr>
<tr>
<td>r w -</td>
<td style="text-align:center">110</td>
<td style="text-align:right">6</td>
</tr>
<tr>
<td>r w x</td>
<td style="text-align:center">111</td>
<td style="text-align:right">7</td>
</tr>
</tbody>
</table>
<ul>
<li><p>从上图可以看出：</p>
<ul>
<li><strong>r</strong> : 4</li>
<li><strong>w</strong> : 2</li>
<li><strong>x</strong> : 1</li>
</ul>
</li>
<li><p>例如：</p>
<ul>
<li>640：rw-r—–</li>
<li>755：rwxr-xr-x</li>
</ul>
</li>
</ul>
<h2 id="二、修改用户权限"><a href="#二、修改用户权限" class="headerlink" title="二、修改用户权限"></a>二、修改用户权限</h2><blockquote>
<p><strong>chmod [OPTION]… MODE[,MODE]… FILE…</strong><br><strong>chmod [OPTION]… OCTAL-MODE FILE…</strong><br><strong>chmod [OPTION]… –reference=RFILE FILE…</strong></p>
</blockquote>
<h3 id="1-chmod-OPTION-…-OCTAL-MODE-FILE…"><a href="#1-chmod-OPTION-…-OCTAL-MODE-FILE…" class="headerlink" title="1.chmod [OPTION]… OCTAL-MODE FILE…"></a>1.chmod [OPTION]… OCTAL-MODE FILE…</h3><ul>
<li>-R:递归修改权限</li>
</ul>
<ul>
<li><strong>实际示例：</strong></li>
</ul>
<p><img src="http://i.imgur.com/N7xHbey.png" alt=""></p>
<h3 id="2-chmod-OPTION-…-MODE-MODE-…-FILE…"><a href="#2-chmod-OPTION-…-MODE-MODE-…-FILE…" class="headerlink" title="2.chmod [OPTION]… MODE[,MODE]… FILE…"></a>2.chmod [OPTION]… MODE[,MODE]… FILE…</h3><ul>
<li><strong>MODE：修改一类用户的所有权限：</strong><ul>
<li>u=#</li>
<li>g=#</li>
<li>o=#</li>
<li>ug=#</li>
<li>a=#</li>
<li>u=#,g=#</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>Note：#代表你所需要改的权限</li>
</ul>
<p><strong>实际示例：</strong><br><img src="http://i.imgur.com/29duzVL.png" alt=""></p>
</blockquote>
<ul>
<li><p><strong>MODE:修改一类用户的某位或某些权限：</strong></p>
<ul>
<li>u+#</li>
<li>u-#</li>
<li>g+#</li>
<li>g-#</li>
<li>o+#</li>
<li>o-#</li>
<li>gu+#</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li><strong>Note</strong>：#表示某位或某些权限<br><strong>实际示例：</strong><br><img src="http://i.imgur.com/qlF8s5P.png" alt=""></li>
</ul>
</blockquote>
<h3 id="3-chmod-OPTION-…-–reference-RFILE-FILE…"><a href="#3-chmod-OPTION-…-–reference-RFILE-FILE…" class="headerlink" title="3.chmod [OPTION]… –reference=RFILE FILE…"></a>3.chmod [OPTION]… –reference=RFILE FILE…</h3><ul>
<li>参考<strong>RFILE</strong>文件的权限，将<strong>FILE</strong>的修改为同<strong>RFILE</strong>一样的权限；</li>
<li><strong>图片示例：</strong><ul>
<li><img src="http://i.imgur.com/ZZU7Rqg.png" alt=""></li>
</ul>
</li>
</ul>
<h3 id="4-修改文件属主和属组："><a href="#4-修改文件属主和属组：" class="headerlink" title="4.修改文件属主和属组："></a>4.修改文件属主和属组：</h3><blockquote>
<ul>
<li><strong>仅root可用</strong></li>
</ul>
</blockquote>
<ul>
<li><p><strong>修改文件的属主：chown</strong></p>
<ul>
<li>chown [OPTION]… [OWNER][:[GROUP]] FILE…</li>
<li>用法：<ul>
<li>OWNER：仅修改属主</li>
<li>OWNER:GROUP：修改属主和属组</li>
<li>:GROUP：仅修改属组</li>
</ul>
</li>
<li><strong>Note</strong>：命令中的<code>：</code>可用 <code>.</code> 号替换；</li>
<li><strong>-R</strong>：递归</li>
<li><p><strong>实际示例：</strong></p>
<ul>
<li><img src="http://i.imgur.com/v37SIae.png" alt=""></li>
</ul>
</li>
<li><p>chown [OPTION]… –reference=RFILE FILE…</p>
<ul>
<li>同上面chmod的用发一样</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-修改文件属组：chgrp"><a href="#5-修改文件属组：chgrp" class="headerlink" title="5.修改文件属组：chgrp"></a>5.修改文件属组：chgrp</h3><ul>
<li>chgrp [OPTION]… GROUP FILE…</li>
<li>chgrp [OPTION]… –reference=RFILE FILE…</li>
<li>-R：递归</li>
<li><strong>实际示例：</strong><ul>
<li><img src="http://i.imgur.com/OS11hF3.png" alt=""></li>
</ul>
</li>
</ul>
<h3 id="6-文件或目录创建时的遮罩码：umask"><a href="#6-文件或目录创建时的遮罩码：umask" class="headerlink" title="6.文件或目录创建时的遮罩码：umask"></a>6.文件或目录创建时的遮罩码：umask</h3><ul>
<li><strong>FILE</strong>：666-umask<ul>
<li><strong>Note</strong>：如果某类的用户的权限减得的结果中存在x权限，则将其权限+1</li>
</ul>
</li>
<li><strong>DIR</strong>：777-umask</li>
<li><strong>umask</strong>：查看</li>
<li><strong>umask+#</strong>：设定</li>
<li><strong>Note</strong>：仅对当前用户的当前shell进程有效；</li>
<li><strong>实际示例：</strong><ul>
<li><img src="http://i.imgur.com/RUICi7n.png" alt=""></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Linux中，用户和组的权限管理是很基础，也是很至关重要的。本文，对这个知识点做了一次详细的梳理；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、文件的权限主要针对3类用户定义&quot;&gt;&lt;a href=&quot;#一、文件的权限主要针对3类用户定义&quot;
    
    </summary>
    
      <category term="Linux" scheme="http://xiangcl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="Linux基础" scheme="http://xiangcl.com/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>图解OS及Linux的基础知识</title>
    <link href="http://xiangcl.com/linux/chart-linux-os.html"/>
    <id>http://xiangcl.com/linux/chart-linux-os.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>试着尽量用图示来表示个人对内容的理解，不足之处，还望不吝指教。</p>
<h3 id="一-CPU"><a href="#一-CPU" class="headerlink" title="一.CPU"></a>一.CPU</h3></blockquote>
<p><strong>1.cpu与指令集</strong></p>
<ul>
<li><strong>CPU</strong>分为运算器和控制器</li>
<li><p><strong>CPU指令</strong></p>
<ul>
<li>特权指令<ul>
<li>拥有管理权限，（一般情况下，只有OS才有权限运行特权指令）</li>
</ul>
</li>
<li>普通指令<ul>
<li>拥有普通功能，一般应用程序运行</li>
</ul>
</li>
</ul>
</li>
<li><p>不同的运算由不同的运算器完成运算（由指令集提供运算）</p>
</li>
<li><strong>程序员</strong>：一般面向操作系统编程</li>
<li><strong>图示说明：</strong></li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123c98ab644141d3000341" alt="图片标题"></p>
<p><strong>2.人与机器</strong></p>
<blockquote>
<p>感觉没什么好解释的，一切尽在图中</p>
</blockquote>
<ul>
<li><strong>图示说明</strong></li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123cacab644141d3000342" alt="图片标题"></p>
<blockquote>
<h3 id="二-OS"><a href="#二-OS" class="headerlink" title="二.OS"></a>二.OS</h3></blockquote>
<p><strong>1.OS的目的与功能</strong></p>
<ul>
<li><strong>OS</strong>：Operating System</li>
<li><strong>System Call</strong><ul>
<li>简称为：Syscall （系统调用）</li>
</ul>
</li>
<li><strong>OS</strong>的通用目的与功能：</li>
<li><strong>图示说明：</strong></li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123cb9ab644141d3000343" alt="图片标题"></p>
<p><strong>2.编程的层次</strong></p>
<ul>
<li><strong>硬件规格</strong>：hardware specifiacation<ul>
<li>不同厂商的硬件规格千差万别，API也各不相同，写起来极为不便；</li>
</ul>
</li>
<li><strong>系统调用</strong>：数量很少，但是很精巧；</li>
<li><p><strong>库调用</strong>：library call</p>
<ul>
<li>把底层的功能整合出来，提供成离最终目标更近的功能；对所有的计算机功能来说，所有的功能都是通过调用实现；（通常都是c，c++库）</li>
</ul>
</li>
<li><p><strong>图示说明：</strong></p>
</li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123cccab64414339000393" alt="图片标题"></p>
<p><strong>3.指令环</strong></p>
<ul>
<li>由内到外依次是<strong>环0、环1、环2、环3</strong>；</li>
<li><strong>环0</strong>是特权指令，一般只有操作系统有权限运行；</li>
<li><strong>环1、环2</strong>出于历史原因，没有使用；</li>
<li><p><strong>环3</strong>是普通指令，一般应用程序使用；</p>
<ul>
<li><strong>特殊情况</strong>：例如：<code>mkdir /home/test</code></li>
<li><strong>Note</strong>：没办法直接完成，需要向内核申请权限；</li>
</ul>
</li>
<li><p><strong>图示说明：</strong></p>
</li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123cdcab644141d3000344" alt="图片标题"></p>
<p><strong>4.程序的运行模式</strong></p>
<ul>
<li><strong>用户空间</strong>：user space（us）</li>
<li><p><strong>内核空间</strong>：system space</p>
</li>
<li><p><strong>图示说明：</strong></p>
</li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123ce9ab644141d3000345" alt="图片标题"></p>
<blockquote>
<h3 id="三-UI：User-Interface"><a href="#三-UI：User-Interface" class="headerlink" title="三.UI：User Interface"></a>三.UI：User Interface</h3></blockquote>
<p><code>对OS来说：UI是用户接口、对用户来说UI是前端；</code></p>
<ul>
<li><strong>GUI</strong>：Graphic User Interface （图形用户接口）</li>
<li><p><strong>CLI</strong>：Command Line Interface （命令行接口）</p>
</li>
<li><p><strong>图示说明：</strong></p>
</li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123d10ab644141d3000347" alt="图片标题"></p>
<blockquote>
<h3 id="四-ABI与API"><a href="#四-ABI与API" class="headerlink" title="四.ABI与API"></a>四.ABI与API</h3></blockquote>
<ul>
<li><p><strong>ABI</strong>：Application Binary Interface（应用程序二进制接口）</p>
<ul>
<li>描述了应用程序（或者其他类型）和操作系统之间或其他应用程序的低级接口。</li>
</ul>
</li>
<li><p><strong>API</strong>: Application Programming Interface（应用程序编程接口）</p>
<ul>
<li>是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节</li>
</ul>
</li>
<li><p><strong>图示说明：</strong></p>
</li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123d35ab644141d3000348" alt="图片标题"></p>
<blockquote>
<h3 id="五-主流的CPU架构"><a href="#五-主流的CPU架构" class="headerlink" title="五.主流的CPU架构"></a>五.主流的CPU架构</h3></blockquote>
<ul>
<li><strong>图示说明：</strong></li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123d3fab64414339000396" alt="图片标题"></p>
<blockquote>
<h3 id="六-流行的OS分支"><a href="#六-流行的OS分支" class="headerlink" title="六.流行的OS分支"></a>六.流行的OS分支</h3></blockquote>
<ul>
<li><strong>图示说明：</strong></li>
</ul>
<p><img src="https://leanote.com/api/file/getImage?fileId=57123d4bab644141d300034c" alt="图片标题"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;试着尽量用图示来表示个人对内容的理解，不足之处，还望不吝指教。&lt;/p&gt;
&lt;h3 id=&quot;一-CPU&quot;&gt;&lt;a href=&quot;#一-CPU&quot; class=&quot;headerlink&quot; title=&quot;一.CPU&quot;&gt;&lt;/a&gt;一.CPU&lt;/h3&gt;&lt;/blockqu
    
    </summary>
    
      <category term="Linux" scheme="http://xiangcl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="OS" scheme="http://xiangcl.com/tags/OS/"/>
    
      <category term="图解" scheme="http://xiangcl.com/tags/%E5%9B%BE%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件与目录管理1</title>
    <link href="http://xiangcl.com/Linux/linux-file-dir-man-one.html"/>
    <id>http://xiangcl.com/Linux/linux-file-dir-man-one.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、目录与路径"><a href="#一、目录与路径" class="headerlink" title="一、目录与路径"></a>一、目录与路径</h2><h3 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h3><h4 id="1-绝对路径：路径的写法“一定由跟目录-写起”"><a href="#1-绝对路径：路径的写法“一定由跟目录-写起”" class="headerlink" title="1.绝对路径：路径的写法“一定由跟目录 / 写起”"></a>1.绝对路径：路径的写法“一定由跟目录 <code>/</code> 写起”</h4><ul>
<li>例如：<code>/usr/share/doc</code></li>
</ul>
<h4 id="2-相对路径：路径的写法“不是由-写起”"><a href="#2-相对路径：路径的写法“不是由-写起”" class="headerlink" title="2.相对路径：路径的写法“不是由/写起”"></a>2.相对路径：路径的写法“不是由<code>/</code>写起”</h4><ul>
<li>例如：由 <code>/usr/share/doc</code> 要到 <code>/usr/share/man</code> 下面<br>时，可以写成： “<code>cd ../man</code>”这就是相对路径的写法啦！相对路径意指“相对于目前工作目录的路径！”</li>
</ul>
<h3 id="目录的相关操作"><a href="#目录的相关操作" class="headerlink" title="目录的相关操作"></a>目录的相关操作</h3><h4 id="特殊目录"><a href="#特殊目录" class="headerlink" title="特殊目录"></a>特殊目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dr-xr-xr-x. 19 root root  4096 11月  5 10:25 .       #代表此层目录</div><div class="line">dr-xr-xr-x. 19 root root  4096 11月  5 10:25 ..      #代表上一层目录</div><div class="line"></div><div class="line">~       #代表“目前使用者身份”所在的主文件夹</div><div class="line">~xiangcl        #代表 xiangcl 这个使用者的主文件夹（ xiangcl是个帐号名称）</div></pre></td></tr></table></figure>
<h4 id="常见的目录处理指令"><a href="#常见的目录处理指令" class="headerlink" title="常见的目录处理指令"></a>常见的目录处理指令</h4><h5 id="cd-change-directory-变换目录"><a href="#cd-change-directory-变换目录" class="headerlink" title="cd (change directory, 变换目录)"></a>cd (change directory, 变换目录)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ cd ~      #回到当前用户的主目录</div><div class="line">$ cd ~USERNAME       #切换到指定用户目录的主目录</div><div class="line">$ cd        #回到当前用户的主目录</div><div class="line">$ cd ..     #切换到当前位置的上一层目录</div><div class="line">$ cd -      #在上一个目录和当前目录之间来回切换</div><div class="line">$ cd /usr/share     #进入/usr/share这个目录，绝对路径的写法</div><div class="line">$ cd ../src     #进入/usr/src这个目录，相对路径的写法</div></pre></td></tr></table></figure>
<h5 id="pwd-OPTION-（显示目前所在的目录）"><a href="#pwd-OPTION-（显示目前所在的目录）" class="headerlink" title="pwd [OPTION]  （显示目前所在的目录）"></a>pwd [OPTION]  （显示目前所在的目录）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ pwd       #显示当前所在目录的绝对路径</div><div class="line">$ pwd -P        #显示出真实路径，而非链接(link)路径</div><div class="line">例如：</div><div class="line">[xiangcl@VM_0_26_centos ~]$ cd /var/mail/       #切换到/var/mail这个目录下</div><div class="line">[xiangcl@VM_0_26_centos mail]$ pwd</div><div class="line">/var/mail       #列出当前目录的绝对路径</div><div class="line">[xiangcl@VM_0_26_centos mail]$ pwd -P</div><div class="line">/var/spool/mail     #感觉和没加-P的差别有点大</div><div class="line">[xiangcl@VM_0_26_centos mail]$ cd ..</div><div class="line">[xiangcl@VM_0_26_centos var]$ ls -l mail</div><div class="line">lrwxrwxrwx 1 root root 10 11月  1 09:52 mail -&gt; spool/mail       #原来/var/mail 是链接文件，链接到 /var/spool/mail</div></pre></td></tr></table></figure>
<p><em>pwd是Print Working Directory的缩写，是显示目前所在目录的指令。</em></p>
<h5 id="mkdir-options-file…-创建新目录"><a href="#mkdir-options-file…-创建新目录" class="headerlink" title="mkdir [options] file…   (创建新目录)"></a>mkdir [options] file…   (创建新目录)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">-m mode, --mode=mode</div><div class="line">    设置文件的权限喔！直接设置，不需要看默认权限 （ umask）</div><div class="line">-p, --parents</div><div class="line">    帮助你直接将所需要的目录（包含上层目录） 递回创建起来！</div><div class="line">-v</div><div class="line">    显示详细信息</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos ~]$ cd /tmp/    #切换到/tpm下去做实验</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ mkdir test    #创建test这个目录，没有返回消息代表创建成功</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ mkdir test1/test2/test3      #创建失败</div><div class="line">mkdir: 无法创建目录&quot;test1/test2/test3&quot;: 没有那个文件或目录</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ mkdir -p test1/test2/test3    #需要加上-p去递归创建</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ tree test1    #显示test1这个目录下的层级结构</div><div class="line">test1</div><div class="line">`-- test2</div><div class="line">    `-- test3</div><div class="line"></div><div class="line">2 directories, 0 files</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos tmp]$ mkdir -m 711 test2</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ ls -ld test*</div><div class="line">drwxrwxr-x 2 xiangcl xiangcl 4096 11月  5 11:32 test</div><div class="line">drwxrwxr-x 3 xiangcl xiangcl 4096 11月  5 11:33 test1</div><div class="line">drwx--x--x 2 xiangcl xiangcl 4096 11月  5 11:37 test2</div><div class="line">#没有加-m选项的目录会使用系统默认的属性</div><div class="line">#[umask]设置默认属性</div></pre></td></tr></table></figure>
<h5 id="rmdir-（删除“空”目录）"><a href="#rmdir-（删除“空”目录）" class="headerlink" title="rmdir  （删除“空”目录）"></a>rmdir  （删除“空”目录）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">rmdir[options]directory...</div><div class="line">OPTION:</div><div class="line">    -v：显示过程</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos tmp]$ ls -ld test*      #查看/tmp这个目录下的文件</div><div class="line">drwxrwxr-x 2 xiangcl xiangcl 4096 11月  5 11:32 test</div><div class="line">drwxrwxr-x 3 xiangcl xiangcl 4096 11月  5 11:33 test1</div><div class="line">drwx--x--x 2 xiangcl xiangcl 4096 11月  5 11:37 test2</div><div class="line">drwxr--r-- 2 xiangcl root    4096 11月  1 13:44 testing</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos tmp]$ rmdir test        #删除test这个目录，Note：test这个目录为空</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ rmdir test1       #删除test1这个目录失败，因为这个目录不为空</div><div class="line">rmdir: 删除 &quot;test1&quot; 失败: 目录非空</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos tmp]$ rmdir -p test1/test2/test3/       #加上那个-p选项</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ ls -ld test*</div><div class="line">drwx--x--x 2 xiangcl xiangcl 4096 11月  5 11:37 test2</div><div class="line">drwxr--r-- 2 xiangcl root    4096 11月  1 13:44 testing</div></pre></td></tr></table></figure>
<h3 id="文件内容类型查看命令：file"><a href="#文件内容类型查看命令：file" class="headerlink" title="文件内容类型查看命令：file"></a>文件内容类型查看命令：file</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">file /PAHT/TO/SOMEWHERE</div><div class="line"></div><div class="line">范例：查看 /etc/passwd 的文件类型</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ cd /etc/</div><div class="line">[xiangcl@VM_0_26_centos etc]$ file ./passwd</div><div class="line">./passwd: ASCII text</div></pre></td></tr></table></figure>
<h3 id="回显命令：echo"><a href="#回显命令：echo" class="headerlink" title="回显命令：echo"></a>回显命令：echo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-n: 禁止自动添加换行符号；</div><div class="line">-e: 允许使用转义符；</div><div class="line">	\n: 换行</div><div class="line">	\t: 制表符</div><div class="line"></div><div class="line">echo &quot;$VAR_NAME&quot;: 变量会替换，双引号表弱引用</div><div class="line">echo &apos;$VAR_NAME&apos;: 变量不会替换，强引用</div></pre></td></tr></table></figure>
<h3 id="which：显示命令对应的程序文件路径"><a href="#which：显示命令对应的程序文件路径" class="headerlink" title="which：显示命令对应的程序文件路径"></a>which：显示命令对应的程序文件路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">which [OPTION] COMMAND</div><div class="line">	--skip-alias：禁止显示别名</div><div class="line"></div><div class="line">范例一：显示 ls 对应的程序文件路径</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ which ls</div><div class="line">alias ls=&apos;ls --color=auto&apos;</div><div class="line">	/usr/bin/ls</div><div class="line"></div><div class="line">范例二：在范例一的基础上不显示别名</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ which --skip-alias ls</div><div class="line">/usr/bin/ls</div></pre></td></tr></table></figure>
<h3 id="whatis-用于查询一个命令执行什么功能，并将查询结果打印到终端上"><a href="#whatis-用于查询一个命令执行什么功能，并将查询结果打印到终端上" class="headerlink" title="whatis :用于查询一个命令执行什么功能，并将查询结果打印到终端上"></a>whatis :用于查询一个命令执行什么功能，并将查询结果打印到终端上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">使用mkwhatis命令可将当前系统上所有的帮助手册及与之对应的关键字创建为一个数据库；</div><div class="line"></div><div class="line">whatis命令在用catman命令创建的数据库中查找command参数指定的命令、系统调用、库函数或特殊文件名。whatis命令显示手册部分的页眉行。然后可以发出man命令以获取附加的信息。whatis命令等同于使用man -f命令。（需要root权限）</div><div class="line"></div><div class="line">范例：显示 ls 手册部分的页眉行</div><div class="line">[root@VM_0_26_centos ~]# whatis ls</div><div class="line">ls (1)               - 列目录内容</div></pre></td></tr></table></figure>
<h2 id="二、文件与目录管理"><a href="#二、文件与目录管理" class="headerlink" title="二、文件与目录管理"></a>二、文件与目录管理</h2><h3 id="ls-options-files…-（列出目录的内容）"><a href="#ls-options-files…-（列出目录的内容）" class="headerlink" title="ls [options] [files…]       （列出目录的内容）"></a>ls [options] [files…]       （列出目录的内容）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">-a，--all</div><div class="line">    全部的文件，连同隐藏文件（ 开头为 . 的文件） 一起列出来（ 常用）</div><div class="line">-A，--almost-all</div><div class="line">    全部的文件，连同隐藏文件，但不包括 . 与 .. 这两个目录</div><div class="line">-d，--directory</div><div class="line">    仅列出目录本身，而不是列出目录内的文件数据</div><div class="line">-f</div><div class="line">    直接列出结果，而不进行排序 （ ls 默认会以文件名排序！）</div><div class="line">-F</div><div class="line">    根据文件、目录等信息，给予附加数据结构</div><div class="line">    例如：*:代表可可执行文件； /:代表目录； =:代表 socket 文件； &amp;#124;:代表 FIFO 文件；</div><div class="line">-h，--human-readable</div><div class="line">    将文件大小以人类较易读的方式（ 例如 GB, KB 等等） 列出来；</div><div class="line">-i</div><div class="line">    列出 inode 号码，inode 的意义下一章将会介绍；</div><div class="line">-l，, --format=long, --format=verbose</div><div class="line">    长数据串行出，除每个文件名外，增加显示文件类型、权限、硬链接数、所有者名、组名、大小（byte）、及时间信息（如未指明是其它时间即指修改时间）。对于6个月以上的文件或超出未来1小时的文件，时间信息中的时分将被年代取代。；（ 常用）</div><div class="line">-n，--numeric-uid-gid</div><div class="line">    列出 UID 与 GID 而非使用者与群组的名称 （ UID与GID会在帐号管理提到！）</div><div class="line">-r，--reverse</div><div class="line">    将排序结果反向输出，例如：原本文件名由小到大，反向则为由大到小；</div><div class="line">-R，--recursive</div><div class="line">    连同子目录内容一起列出来，等于该目录下的所有文件都会显示出来；</div><div class="line">-S，--sort=size</div><div class="line">    以文件大小大小排序，而不是用文件名排序；</div><div class="line">-t，--sort=time</div><div class="line">    依时间排序，而不是用文件名。</div><div class="line">--color=never</div><div class="line">    不要依据文件特性给予颜色显示；</div><div class="line">--color=always</div><div class="line">    显示颜色</div><div class="line">--color=auto</div><div class="line">    让系统自行依据设置来判断是否给予颜色</div><div class="line">--full-time</div><div class="line">    以完整时间模式（包含年、月、日、时、分）输出</div><div class="line">--time=&#123;atime,ctime&#125;</div><div class="line">    输出 access 时间或改变权限属性时间（ctime），而非内容变更时间（modification time）</div></pre></td></tr></table></figure>
<h3 id="复制-cp-、删除-rm-与移动-mv"><a href="#复制-cp-、删除-rm-与移动-mv" class="headerlink" title="复制(cp)、删除(rm)与移动(mv)"></a>复制(cp)、删除(rm)与移动(mv)</h3><h4 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp    (复制文件或目录)"></a>cp    (复制文件或目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">cp [OPTION]... [-T] SOURCE DEST</div><div class="line">cp [OPTION]... SOURCE... DIRECTORY</div><div class="line">cp [OPTION]... -t DIRECTORY SOURCE...</div><div class="line"></div><div class="line">cp SRC DEST</div><div class="line">    SRC是文件：</div><div class="line">    	如果目标不存在：新建DEST，并将SRC中内容填充至DEST中；</div><div class="line">    	如果目录存在：</div><div class="line">    		如果DEST是文件：将SRC中的内容覆盖至DEST中；</div><div class="line">    			此时建议为cp命令使用-i选项；</div><div class="line">    		如果DEST是目录：在DEST下新建与原文件同名的文件，并将SRC中内容填充至新文件中；</div><div class="line"></div><div class="line">cp SRC DEST</div><div class="line">	SRC是目录：</div><div class="line">		此时使用选项：-r</div><div class="line"></div><div class="line">		如果DEST不存在：则创建指定目录，复制SRC目录中所有文件至DEST中；</div><div class="line">		如果DEST存在：</div><div class="line">			如果DEST是文件：报错</div><div class="line">			如果DEST是目录：在DEST下新建与源目录同名的目录及文件，将SRC中的文件内容填充至新目录的文件中。</div><div class="line"></div><div class="line">cp SRC... DEST</div><div class="line">	SRC...：多个文件</div><div class="line">		DEST必须存在，且为目录，其它情形均会出错；</div><div class="line"></div><div class="line">Common options:</div><div class="line">-a,--archive</div><div class="line">    归档，相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明；（ 常用）</div><div class="line">-d, --no-dereference --preserv=links</div><div class="line">    --preserv[=ATTR_LIST]</div><div class="line">    	mode: 权限</div><div class="line">    	ownership: 属主属组</div><div class="line">    	timestamp:</div><div class="line">    	links</div><div class="line">    	xattr</div><div class="line">    	context</div><div class="line">    	all</div><div class="line">    复制符号链接作为符号链接而不是复制它指向的文件,并且保护在副本中原文件之间的硬链接.</div><div class="line">-f,--force</div><div class="line">    为强制（ force） 的意思，若目标文件已经存在且无法打开，则移除后再尝试一次；</div><div class="line">-i,--interactive</div><div class="line">    交互式</div><div class="line">    若目标文件（ destination） 已经存在时，在覆盖时会先询问动作的进行（ 常用）</div><div class="line">-l,--link</div><div class="line">    进行硬式链接（ hard link） 的链接文件创建，而非复制文件本身；</div><div class="line">-p,--preserve</div><div class="line">    连同文件的属性（权限、用户、时间、许可）一起复制过去，而非使用默认属性（ 备份常用） ；</div><div class="line">-r</div><div class="line">    递回持续复制，用于目录的复制行为；（ 常用）</div><div class="line">-R, --recursive</div><div class="line">    递归地复制目录,保留非目录</div><div class="line">-s，--symbolic-link</div><div class="line">    复制成为符号链接文件 （ symbolic link） ，亦即“捷径”文件；</div><div class="line">-u，--update</div><div class="line">    destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制。</div><div class="line">--preserve=all</div><div class="line">    除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了。</div><div class="line">    最后需要注意的，如果来源文件有两个以上，则最后一个目的文件一定要是“目录”才行！</div></pre></td></tr></table></figure>
<h4 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm  (移除文件或目录)"></a>rm  (移除文件或目录)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">rm [optiongs] files...</div><div class="line">options:</div><div class="line">    -f, --force</div><div class="line">        强制删除，就是 force 的意识，忽略不存在的文件，不会出现警告讯息；</div><div class="line">    -i, --interactive</div><div class="line">        交互式</div><div class="line">        互动模式，在删除前会询问使用者是否删除这一动作；</div><div class="line">    -r, -R，--recursive</div><div class="line">        递归删除，最常用在目录的删除。</div><div class="line">    -v，--verbose</div><div class="line">        在移除每个文件之前打印其名称。</div><div class="line"></div><div class="line">范例一：将创建的文件删除</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ touch test</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ rm -i test</div><div class="line">rm：是否删除普通空文件 &quot;test&quot;？y</div><div class="line"># 加上 -i 选项就会主动询问是否删除，避免文件的误删。</div><div class="line"></div><div class="line">范例二：通过*，删除所有以test开头的文件</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ rm -i test*</div><div class="line"># * 代表删除所有以test开头的文件</div><div class="line"></div><div class="line">范例三：将不为空的目录删除</div><div class="line">[root@VM_0_26_centos tmp]# rmdir ./testing</div><div class="line">rmdir: 删除 &quot;./testing&quot; 失败: 目录非空</div><div class="line">[root@VM_0_26_centos tmp]# rm -r ./testing</div><div class="line">rm：是否进入目录&quot;./testing&quot;? y</div><div class="line">rm：是否删除普通空文件 &quot;./testing/1.sh&quot;？y</div><div class="line">rm：是否删除普通空文件 &quot;./testing/2.sh&quot;？y</div><div class="line">rm：是否删除普通空文件 &quot;./testing/3.sh&quot;？y</div><div class="line">rm：是否删除目录 &quot;./testing&quot;？y</div><div class="line"># 因为是root身份，默认已经加入了 -i 的选项，这是一种保护机制</div><div class="line"></div><div class="line">范例四：删除一个带有 - 开头的文件</div><div class="line">[root@VM_0_26_centos tmp]# touch ./-aaa-</div><div class="line">[root@VM_0_26_centos tmp]# ls -l</div><div class="line"> -rw-r--r-- 1 root root    0 11月  9 14:41 -aaa-</div><div class="line">[root@VM_0_26_centos tmp]# rm -aaa-</div><div class="line">rm：无效选项 -- a</div><div class="line">Try &apos;rm ./-aaa-&apos; to remove the file &quot;-aaa-&quot;.</div><div class="line">Try &apos;rm --help&apos; for more information.</div><div class="line">[root@VM_0_26_centos tmp]# rm ./-aaa-</div><div class="line">rm：是否删除普通空文件 &quot;./-aaa-&quot;？y</div></pre></td></tr></table></figure>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ul>
<li>为了防止文件被root误杀，很多distributions都默认在 <code>rm</code> 指令中加了 <code>-i</code> 选项；</li>
<li>递归删除使用 <code>-r</code> 选项，但是<code>-r</code>选项威力太过强大，一般只有确定文件要删除才会使用；</li>
<li>文件名最好不要使用 <code>-</code> 开头；</li>
</ul>
<h4 id="mv-移动文件与目录、或用于文件更名"><a href="#mv-移动文件与目录、或用于文件更名" class="headerlink" title="mv     (移动文件与目录、或用于文件更名)"></a>mv     (移动文件与目录、或用于文件更名)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">mv [option]... source destination</div><div class="line">mv [option]... source... directory</div><div class="line">mv [option]... --target-directory=DIRECTORY SOURCE...</div><div class="line"></div><div class="line">option:</div><div class="line">    -f, --force</div><div class="line">        强制的意思，如果咪表文件已经存在，不会询问而直接覆盖；</div><div class="line">    -i, --interactive</div><div class="line">        覆盖提示</div><div class="line">    -u, --update</div><div class="line">        若目标文件已经存在，且source比目标文件新，才是更新覆盖；</div><div class="line"></div><div class="line">范例一：创建一目录，将文件移动到目录中</div><div class="line">[root@VM_0_26_centos tmp]# cp ~/.bashrc bashrc</div><div class="line">[root@VM_0_26_centos tmp]# mkdir test</div><div class="line">[root@VM_0_26_centos tmp]# mv bashrc test/</div><div class="line"># 将某个文件移动到目录中</div><div class="line"></div><div class="line">范例二：文件更名</div><div class="line">[root@VM_0_26_centos tmp]# mv test test1</div><div class="line"># 将 test 更名为 test1；</div><div class="line"></div><div class="line">范例三：将多个文件移动到目录中</div><div class="line">[root@VM_0_26_centos tmp]# cp ~/.bashrc bashrc1</div><div class="line">[root@VM_0_26_centos tmp]# cp ~/.bashrc bashrc2</div><div class="line">[root@VM_0_26_centos tmp]# mv bashrc1 bashrc2 test1</div><div class="line"># 如果有多个源文件或目录，则最后一个目标文件一定是目录；</div></pre></td></tr></table></figure>
<h3 id="取得文件名与完整路径的目录"><a href="#取得文件名与完整路径的目录" class="headerlink" title="取得文件名与完整路径的目录"></a>取得文件名与完整路径的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_0_26_centos tmp]# basename /etc/sysconfig/network</div><div class="line">network</div><div class="line">[root@VM_0_26_centos tmp]# dirname /etc/sysconfig/network</div><div class="line">/etc/sysconfig</div><div class="line"># 取得文件路径对于在shell script中是很重要的；</div></pre></td></tr></table></figure>
<h2 id="三、文件内容查看"><a href="#三、文件内容查看" class="headerlink" title="三、文件内容查看"></a>三、文件内容查看</h2><ul>
<li>cat 由第一行开始显示文件内容</li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl 显示的时候，顺道输出行号！</li>
<li>more 一页一页的显示文件内容</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
<li>od 以二进制的方式读取文件内容！</li>
</ul>
<h3 id="直接检视文件内容"><a href="#直接检视文件内容" class="headerlink" title="直接检视文件内容"></a>直接检视文件内容</h3><h4 id="cat-concatenate"><a href="#cat-concatenate" class="headerlink" title="cat    (concatenate)"></a>cat    (concatenate)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">cat [选项列表] [文件列表]...</div><div class="line">选项：</div><div class="line"> -A, --show-all</div><div class="line">    相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</div><div class="line"> -b, --number-nonblank</div><div class="line">    列出行号，仅针对非空白行做行号显示，空白行不标行号！</div><div class="line"> -E,  --show-ends</div><div class="line">    将结尾的断行字符 $ 显示出来；</div><div class="line"> -n, --number</div><div class="line">    打印出行号，连同空白行也会有行号，与 -b 的选项不同；</div><div class="line"> -T, --show-tabs</div><div class="line">    将 [tab] 按键以 ^I 显示出来；</div><div class="line"> -v, --show-nonprinting</div><div class="line">    列出一些看不出来的特殊字符</div><div class="line"></div><div class="line">范例一：查看 /etc/issue 这个文件的内容</div><div class="line">[root@VM_0_26_centos ~]# cat /etc/issue</div><div class="line">\S</div><div class="line">Kernel \r on an \m</div><div class="line"></div><div class="line">范例二：在上一题的基础上加上行号</div><div class="line">[root@VM_0_26_centos ~]# cat -n /etc/issue  #第一种方法</div><div class="line"> 1	\S</div><div class="line"> 2	Kernel \r on an \m</div><div class="line"> 3</div><div class="line">[root@VM_0_26_centos ~]# cat -b /etc/issue  #第二种方法</div><div class="line"> 1	\S</div><div class="line"> 2	Kernel \r on an \m</div></pre></td></tr></table></figure>
<h4 id="tac-反向列出文本"><a href="#tac-反向列出文本" class="headerlink" title="tac    (反向列出文本)"></a>tac    (反向列出文本)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[xiangcl@VM_0_26_centos ~]$ tac /etc/issue</div><div class="line"></div><div class="line">Kernel \r on an \m</div><div class="line">\S</div><div class="line"># 与上面 cat的显示效果相反，是由最后一行开始显示的。</div></pre></td></tr></table></figure>
<h4 id="nl-number-lines-of-files-添加行号打印"><a href="#nl-number-lines-of-files-添加行号打印" class="headerlink" title="nl - number lines of files     (添加行号打印)"></a>nl - number lines of files     (添加行号打印)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">nl [OPTION]... [FILE]...</div><div class="line">OPTION:</div><div class="line">-b, --body-numbering=STYLE ：指定行号指定的方式，主要有两种：</div><div class="line">    -b a ：表示不论是否为空行，也同样列出行号（类似 cat -n） ；</div><div class="line">    -b t ：如果有空行，空的那一行不要列出行号（默认值） ；</div><div class="line">-n, --number-format=FORMAT ：列出行号表示的方法，主要有三种：</div><div class="line">    -n ln ：行号在屏幕的最左方显示；</div><div class="line">    -n rn ：行号在自己字段的最右方显示，且不加 0 ；</div><div class="line">    -n rz ：行号在自己字段的最右方显示，且加 0 ；</div><div class="line">-w, --number-width=NUMBER ：行号字段的占用的字符数。</div><div class="line"></div><div class="line">范例一：用 nl 列出 /etc/issue 的内容</div><div class="line">[xiangcl@VM_0_26_centos ~]$ nl /etc/issue</div><div class="line"> 1	\S</div><div class="line"> 2	Kernel \r on an \m</div><div class="line"></div><div class="line"># 这个文件有三行，第三行为空白(没有任何字符)</div><div class="line"># 因为他是空白行，所以 nl 不会加上行号，所以如果确定要加上行号，可以这样做：</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos ~]$ nl -b a /etc/issue</div><div class="line"> 1	\S</div><div class="line"> 2	Kernel \r on an \m</div><div class="line"> 3</div><div class="line"># 行号加上了，如果要让行号前面自动补上0，可以这样做：</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos ~]$ nl -b a -n rz /etc/issue</div><div class="line">000001	\S</div><div class="line">000002	Kernel \r on an \m</div><div class="line">000003</div><div class="line"># 自动在字段的地方补上 0 了，默认字段是六位数，如何改为三位数呢？</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos ~]$ nl -b a -n rz -w 3 /etc/issue</div><div class="line">001	\S</div><div class="line">002	Kernel \r on an \m</div><div class="line">003</div></pre></td></tr></table></figure>
<h3 id="可翻页查看文本"><a href="#可翻页查看文本" class="headerlink" title="可翻页查看文本"></a>可翻页查看文本</h3><p>前面提到的nl、cat与tac命令，都是一次性将数据一口气显示到屏幕上，接下来介绍一下可翻页显示的指令。</p>
<h4 id="more-在显示器上阅读文件的过滤器"><a href="#more-在显示器上阅读文件的过滤器" class="headerlink" title="more   (在显示器上阅读文件的过滤器)"></a>more   (在显示器上阅读文件的过滤器)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">more [-dlfpcsu] [-num] [+/ pattern] [+ linenum] [file ...]</div><div class="line">OPTION：</div><div class="line">    -num:  这个选项指定屏幕的行数 (以整数表示).     # num不是输入num而是输入数字；</div><div class="line">    -f: 使 more 计数 逻辑行, 而不是 屏幕行 (就是说, 长行 不会 断到 下一行).   -d：显示翻页及退出提示</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos ~]$ more  /etc/man_db.conf</div><div class="line"># 使用这个指令后就会进入阅读模式，那么，怎么操作呢？</div><div class="line"></div><div class="line"></div><div class="line">- 空白键 （space）：代表向下翻一页；</div><div class="line">- Enter： 代表向下翻“一行”；</div><div class="line">- / 字串 ：代表在这个显示的内容当中，向下搜寻“字串”这个关键字；</div><div class="line">- :f： 立刻显示出文件名以及目前显示的行数；</div><div class="line">- q： 代表立刻离开 more ，不再显示该文件内容。</div><div class="line">- b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管道无用。</div></pre></td></tr></table></figure>
<p><img src="http://xiangclimg-10066880.cos.myqcloud.com/more_user.gif" alt=""></p>
<p>这里特别强调的是搜索这个指令，在 more 的阅读模式下，直接输入 / 后，光标就会跑到最下面一行，并且等待你的输入，你输入需要搜索的字串后并按下[enter]，more就会向下搜索该字符串，向下使用 n 即可。最后按 q 键退出。</p>
<h4 id="less-一页一页翻动"><a href="#less-一页一页翻动" class="headerlink" title="less   (一页一页翻动)"></a>less   (一页一页翻动)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[xiangcl@VM_0_26_centos ~]$ less /etc/man_db.conf</div></pre></td></tr></table></figure>
<p>在 less 查看文件时常用的指令：</p>
<ul>
<li>空白键： 向下翻动一页；</li>
<li>[pagedown]： 向下翻动一页；</li>
<li>[pageup]： 向上翻动一页；</li>
<li>/ 字串： 向下搜寻“字串”的功能；</li>
<li>? 字串： 向上搜寻“字串”的功能；</li>
<li>n： 重复前一个搜寻 （与 / 或 ? 有关！）</li>
<li>N： 反向的重复前一个搜寻 （与 / 或 ? 有关！）</li>
<li>g： 前进到这个数据的第一行去；</li>
<li>G： 前进到这个数据的最后一行去（注意大小写） ；</li>
<li>q： 离开 less 这个程序；</li>
</ul>
<p>个人觉得相对于<code>more</code>指令来说<code>less</code>要好用，不过存在即有存在的道理，这其中好处还需诸君自行体会。</p>
<h3 id="数据撷取"><a href="#数据撷取" class="headerlink" title="数据撷取"></a>数据撷取</h3><p>有的时候，我们仅仅只需要对文件有个了解。而前面所了解到的指令都是将全文输出，下面我们来了解一下怎样对数据进行简单的撷取。取前面几行文本(head)或取后面(tail)几行文文本。</p>
<p>注意：head与tail都是以 行 为当位进行数据的撷取。</p>
<h4 id="head-输出文件开始的部分"><a href="#head-输出文件开始的部分" class="headerlink" title="head   (输出文件开始的部分)"></a>head   (输出文件开始的部分)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-c #</div><div class="line">    指定获取前#字节</div><div class="line">-n #, --lines=NUMBER</div><div class="line">      显示起始的NUMBER行,而非默认的起始10行</div><div class="line"></div><div class="line">-q, --quiet, --silent</div><div class="line">      不显示包含给定文件名的文件头</div><div class="line"></div><div class="line">-v, --verbose</div><div class="line">      总是显示包含给定文件名的文件头</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[xiangcl@VM_0_26_centos ~]$ head /etc/man_db.conf   #默认显示前10行</div><div class="line">#</div><div class="line">#</div><div class="line"># This file is used by the man-db package to configure the man and cat paths.</div><div class="line"># It is also used to provide a manpath for those without one by examining</div><div class="line"># their PATH environment variable. For details see the manpath(5) man page.</div><div class="line">#</div><div class="line"># Lines beginning with `#&apos; are comments and are ignored. Any combination of</div><div class="line"># tabs or spaces may be used as `whitespace&apos; separators.</div><div class="line">#</div><div class="line"># There are three mappings allowed in this file:</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos ~]$ head -n 3 /etc/man_db.conf    #可以直接指定要显示的行数</div><div class="line">#</div><div class="line">#</div><div class="line"># This file is used by the man-db package to configure the man and cat paths.</div><div class="line"></div><div class="line">[xiangcl@VM_0_26_centos ~]$ head -n 3 -v  /etc/man_db.conf    #显示前三行且在开始处显示文件路径</div><div class="line">==&gt; /etc/man_db.conf &lt;==</div><div class="line">#</div><div class="line">#</div><div class="line"># This file is used by the man-db package to configure the man and cat paths.</div></pre></td></tr></table></figure>
<p><em>如果 <code>-n</code> 后面接的是负数的话，则仅仅显示前面的行数。例如： CentOS 7.1 的 <code>/etc/mandb.conf</code> 共有131行，则上述的指令<code>head -n -100 /etc/man_db.conf</code> 就会列出前面31行，后面100行不会被打印出来。</em></p>
<h4 id="tail-输出文件末尾部分"><a href="#tail-输出文件末尾部分" class="headerlink" title="tail   (输出文件末尾部分)"></a>tail   (输出文件末尾部分)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-c, --bytes=N</div><div class="line">      输出最后N个字节</div><div class="line"></div><div class="line">-f, --follow[=&#123;name|descriptor&#125;]</div><div class="line">      当文件增长时,输出后续添加的数据;  -f, --follow以及 --follow=descriptor</div><div class="line">      都是相同的意思</div><div class="line"></div><div class="line">-n, --lines=N</div><div class="line">      输出最后N行,而非默认的最后10行</div><div class="line"></div><div class="line">--pid=PID</div><div class="line">      与-f合用,表示在进程ID,PID死掉之后结束.</div><div class="line"></div><div class="line">-q, --quiet, --silent</div><div class="line">      从不输出给出文件名的首部</div><div class="line"></div><div class="line">-s, --sleep-interval=S</div><div class="line">      与-f合用,表示在每次反复的间隔休眠S秒</div><div class="line"></div><div class="line">-v, --verbose</div><div class="line">      总是输出给出文件名的首部</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[xiangcl@VM_0_26_centos ~]$ tail /etc/man_db.conf</div><div class="line"># 默认情况下显示的是最后10行</div><div class="line"># 如果要显示最后20行，则可以写成：</div><div class="line">[xiangcl@VM_0_26_centos ~]$ tail -n 20 /etc/man_db.conf</div><div class="line"></div><div class="line">范例一 ：如果不知道 /etc/man_db.conf 有多少行，却只想列出100行以后的数据：</div><div class="line">[xiangcl@VM_0_26_centos ~]$ tail -n +100 /etc/man_db.conf</div><div class="line"></div><div class="line">范例二 ：持续侦测 /var/log/messages 的内容</div><div class="line">[root@VM_0_26_centos ~]# tail -f /var/log/messages</div><div class="line"># 如果文件内容有变化的话会持续更新，退出请按[Crtl]+c;</div></pre></td></tr></table></figure>
<p><em>Note：</em>范例二必须使用root身份才行。*</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">例题一： 显示 /etc/man_db.conf 的第 11 到第 20 行</div><div class="line"># 思路：先取前20行，再取后10行；</div><div class="line">$ head -n 20 /etc/man_db.conf | tail -n 10</div><div class="line"></div><div class="line">例题二： 显示 /etc/man_db.conf 的第 11 到第 20 行，且带行号</div><div class="line">$ cat -n /etc/man_db.conf | head -n 20 | tail -n 10</div></pre></td></tr></table></figure>
<h3 id="非纯文本文件：od"><a href="#非纯文本文件：od" class="headerlink" title="非纯文本文件：od"></a>非纯文本文件：od</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">od [OPTION]... [FILE]...</div><div class="line">od [-abcdfilosx]... [FILE] [[+]OFFSET[.][b]]</div><div class="line">od --traditional [OPTION]... [FILE] [[+]OFFSET[.][b] [+][LABEL][.][b]]</div><div class="line"></div><div class="line">OPTION:</div><div class="line">    -t, --format=TYPE ：后面可以接各种“类型 （ TYPE） ”的输出，例如：</div><div class="line">        a ：利用默认的字符来输出；</div><div class="line">        c ：使用 ASCII 字符来输出</div><div class="line">        d[size] ：利用十进制（ decimal） 来输出数据，每个整数占用 size Bytes ；</div><div class="line">        f[size] ：利用浮点数值（ floating） 来输出数据，每个数占用 size Bytes ；</div><div class="line">        o[size] ：利用八进位（ octal） 来输出数据，每个整数占用 size Bytes ；</div><div class="line">        x[size] ：利用十六进制（ hexadecimal） 来输出数据，每个整数占用 size Bytes ；</div><div class="line"></div><div class="line">范例一： 将/usr/bin/passwd的内容使用ASCII方式来展现</div><div class="line">[root@VM_0_26_centos ~]# od -t c /usr/bin/passwd</div><div class="line"></div><div class="line">范例二：将/etc/issue这个文件的内容以8进位列出储存值与ASCII的对照表</div><div class="line">[root@VM_0_26_centos ~]# od -t oCc /etc/issue</div><div class="line">0000000 134 123 012 113 145 162 156 145 154 040 134 162 040 157 156 040</div><div class="line">          \   S  \n   K   e   r   n   e   l       \   r       o   n</div><div class="line">0000020 141 156 040 134 155 012 012</div><div class="line">          a   n       \   m  \n  \n</div><div class="line">0000027</div><div class="line"># 如上所示，可以发现每个字符可以对应到的数值为何！要注意的是，该数值是 8 进位</div><div class="line"># 例如 S 对应的记录数值为 123 ，转成十进制：1x8^2+2x8+3=83。</div></pre></td></tr></table></figure>
<h3 id="修改文件时间或创建新文件：touch"><a href="#修改文件时间或创建新文件：touch" class="headerlink" title="修改文件时间或创建新文件：touch"></a>修改文件时间或创建新文件：touch</h3><p>我们在 <code>ls</code> 这个指令的介绍时，有稍微提到每个文件在linux下面都会记录许多的时间参数， 其实有三个主要的变动时间，那么三个时间的意义是什么呢？</p>
<ul>
<li>modification time （mtime） ： 当该文件的“内容数据”变更时，就会更新这个时间！内容数据指的是文件的内容，而不是文件的属性或权限喔！</li>
<li>status time （ctime） ： 当该文件的“状态 （status）”改变时，就会更新这个时间，举例来说，像是权限与属性被更改了，都会更新这个时间啊。</li>
<li>access time （atime） ： 当“该文件的内容被取用”时，就会更新这个读取时间（access） 。举例来说，我们使用 cat 去读取 /etc/man_db.conf ， 就会更新该文件的atime 了。</li>
</ul>
<p>举例：查看 <code>/etc/man_db.conf</code> 这个文件的时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@VM_0_26_centos ~]# date; ls -l /etc/man_db.conf ;ls -l --time=atime /etc/man_db.conf ; ls -l --time=ctime /etc/man_db.conf</div><div class="line">2016年 11月 12日 星期六 14:57:46 CST  # 显示目前的时间</div><div class="line">-rw-r--r--. 1 root root 5171 6月  10 2014 /etc/man_db.conf   # 创建内容的时间（mtime）</div><div class="line">-rw-r--r--. 1 root root 5171 6月  10 2014 /etc/man_db.conf   # 读取内容的时间（atime）</div><div class="line">-rw-r--r--. 1 root root 5171 1月  20 2015 /etc/man_db.conf   # 更新状态的时间（ctime）</div></pre></td></tr></table></figure>
<p><em>默认情况下 <code>ls</code> 显示的是该文件的mtime，也就是这个文件内容上次被更改的时间。</em></p>
<p>文件的时间是很重要的，因为，如果文件的时间误判的话，可能会造成某些程序无法顺利的运行。</p>
<p>如果我们要修改文件时间则使用 <code>touch</code> 命令修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">touch - 修改文件的时间戳记.</div><div class="line"> touch [-acm][-r ref_file(参照文件)|-t time(时间值)] file(文件名)...</div><div class="line">OPTION:</div><div class="line">    -a</div><div class="line">        修改文件 file 的存取时间，也就是仅修订 access time；</div><div class="line">    -c</div><div class="line">        仅修改文件的时间，若该文件不存在则不创建新文件；</div><div class="line">    -d, --date=time</div><div class="line">        后面可以接欲修订的日期而不用目前的日期，也可以使用 --date=&quot;日期或时间&quot;</div><div class="line">    -m, --time=mtime, --time=modify</div><div class="line">        仅修改 mtime ；</div><div class="line">    -t STAMP，decimtime</div><div class="line">        后面可以接欲修订的时间而不用目前的时间，格式为[YYYYMMDDhhmm]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">范例一：新建一个空的文件并观察时间</div><div class="line">[xiangcl@VM_0_26_centos ~]$ cd /tmp/</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ touch testtouch</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ ls -l testtouch</div><div class="line">-rw-rw-r-- 1 xiangcl xiangcl 0 11月 14 09:13 testtouch</div><div class="line"></div><div class="line"># 新文件的大小为0。在默认状态下，如果 touch 后接有文件，则该文件的三个时间（atime/ctime/mtime）都会更新为目前的时间，若该文件不存在，则会主动的创建一个新的空文件。</div><div class="line"></div><div class="line">范例二：将 ~/.bashrc 复制为 bashrc ，复制完整的属性，并检查其日期。</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ cp -a ~/.bashrc bashrc</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ date; ll bashrc; ll --time=atime bashrc; ll --time=ctime bashrc</div><div class="line">2016年 11月 14日 星期一 09:21:02 CST                      # 这是当前的时间</div><div class="line">-rw-r--r-- 1 xiangcl xiangcl 231 8月   3 00:00 bashrc    # 这是mtime的时间</div><div class="line">-rw-r--r-- 1 xiangcl xiangcl 231 8月   3 00:00 bashrc    # 这是atime的时间</div><div class="line">-rw-r--r-- 1 xiangcl xiangcl 231 11月 14 09:20 bashrc    # 这是ctime的时间</div><div class="line"></div><div class="line"># 在执行结果中，可以看到数据的内容与属性完全被复制过来，因此文件内容时间（mtime）与原本文件相同，但是由于这个文件是刚刚被创建的，因此状态（ ctime） 就变成现在的时间。</div><div class="line"></div><div class="line">范例三：修改范例二的 bashrc 文件，将日期（ctime）调整为两天前</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ date; ll bashrc; ll --time=atime bashrc; ll --time=ctime bashrc;</div><div class="line">2016年 11月 14日 星期一 09:46:44 CST</div><div class="line">-rw-r--r-- 1 xiangcl xiangcl 231 11月 12 09:46 bashrc</div><div class="line">-rw-r--r-- 1 xiangcl xiangcl 231 11月 12 09:46 bashrc</div><div class="line">-rw-r--r-- 1 xiangcl xiangcl 231 11月 14 09:46 bashrc</div><div class="line"># （atime/ctime）变成了当前时间的 2 天以前，不过 ctime 并没有跟着改变。</div><div class="line"></div><div class="line">范例四：将上个范例的bashrc日期改为 2015/11/11 11:11</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ touch -t 201511111111 bashrc</div><div class="line">[xiangcl@VM_0_26_centos tmp]$ date; ll bashrc; ll --time=atime bashrc; ll --time=ctime bashrc;</div><div class="line">2016年 11月 14日 星期一 09:50:25 CST</div><div class="line">-rw-r--r-- 1 xiangcl xiangcl 231 11月 11 2015 bashrc</div><div class="line">-rw-r--r-- 1 xiangcl xiangcl 231 11月 11 2015 bashrc</div><div class="line">-rw-r--r-- 1 xiangcl xiangcl 231 11月 14 09:50 bashrc</div><div class="line"># 时间atime和mtime都改变了，唯独ctime记录了当前的时间。</div></pre></td></tr></table></figure>
<p><em>Note：1、即使我们复制一个文件时，复制所有的属性，但也没有办法复制ctime 这个属性的。 ctime 可以记录这个文件最近的状态 （ status） 被改变的时间。2、平时看的文件属性中，比较重要的还是属于那个 mtime</em></p>
<h4 id="touch-指令常用情景"><a href="#touch-指令常用情景" class="headerlink" title="touch 指令常用情景"></a>touch 指令常用情景</h4><ul>
<li>创建一个空文件</li>
<li>修改文件时间（mtime和atime）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、目录与路径&quot;&gt;&lt;a href=&quot;#一、目录与路径&quot; class=&quot;headerlink&quot; title=&quot;一、目录与路径&quot;&gt;&lt;/a&gt;一、目录与路径&lt;/h2&gt;&lt;h3 id=&quot;相对路径与绝对路径&quot;&gt;&lt;a href=&quot;#相对路径与绝对路径&quot; class=&quot;header
    
    </summary>
    
      <category term="Linux" scheme="http://xiangcl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="Linux基础" scheme="http://xiangcl.com/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>html+css定位相关知识点</title>
    <link href="http://xiangcl.com/web-front-end/html-css-location.html"/>
    <id>http://xiangcl.com/web-front-end/html-css-location.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定位-基本概念"><a href="#定位-基本概念" class="headerlink" title="定位-基本概念"></a>定位-基本概念</h2><ul>
<li>基本概念：<ul>
<li>css定位(Positioning)属性允许你对元素进行定位。（即把元素放在我们期望的位置）</li>
</ul>
</li>
<li>position属性值：<ul>
<li>static：静态定位，（默认值）。</li>
<li>relative：相对定位，设定元素的位置为相对其在父元素中的位置的一个相对位置。</li>
<li>absolute：设定元素的位置为一个绝对值所固定的位置，该绝对值是相对于此元素的上级具有非静态定位的元素而定的。如果其上级元素均没有非静态定位的情况，则相对于body(也就是整个网页)来定位。</li>
<li>fixed：非常类始于absolute定位，参照系是我们可见的窗口区域。即参照系并不是某个元素(也不是body网页)。</li>
<li>定位需要和四个值配合使用：left、top、right、button</li>
</ul>
</li>
</ul>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位(relative)"></a>相对定位(relative)</h3><ul>
<li>实现效果：<ul>
<li><img src="http://i.imgur.com/bWKl6Nw.png" alt=""></li>
</ul>
</li>
<li><p>演示代码：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;相对定位&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
    .div-box{
        width:400px;
        height:100px;
        border:1px solid red;
    }
    .div2{
        width:80px;
        height:30px;
        float:left;
        background:green;
        margin:5px;
    }
    .te1{
        /*向下移动50px*/
        top:50px;
        /*向右移动30px*/
        left:30px;
        /*使用相对定位*/
        position:relative;
    }

    &lt;/style&gt;

&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;div-box&quot;&gt;
        &lt;div class=&quot;div2&quot;&gt;div1&lt;/div&gt;
        &lt;div class=&quot;div2 te1&quot;&gt;div2&lt;/div&gt;
        &lt;div class=&quot;div2&quot;&gt;div3&lt;/div&gt;
        &lt;div class=&quot;div2&quot;&gt;div4&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></li>
</ul>
<ul>
<li>案例结论：<ul>
<li>相对定位的left和top是针对该元素原来的位置。</li>
<li>当相对定位后，原来的空间任是被保留的。</li>
<li>当相对定位后，如果相对定位后的元素和原来的元素有重叠，则会发生覆盖。  </li>
</ul>
</li>
</ul>
<h3 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位(absolute)"></a>绝对定位(absolute)</h3><ul>
<li><p><code>positon:absolute</code></p>
</li>
<li><p>绝对定位参考的点，是上一级最近的那个非静态定位元素的左上角定位。</p>
</li>
<li>如果上一级元素没有非静态定位的元素，则以浏览器视窗的左上角为原点。(body网页)</li>
<li>绝对定位后，他的空间会让给其它元素来使用。</li>
</ul>
<h5 id="实现效果："><a href="#实现效果：" class="headerlink" title="实现效果："></a>实现效果：</h5><p><img src="http://i.imgur.com/3Pca0HU.png" alt=""></p>
<h5 id="演示代码："><a href="#演示代码：" class="headerlink" title="演示代码："></a>演示代码：</h5><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;绝对定位&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        .div-box{
            width:400px;
            height:200px;
            border:1px solid red;
            position:absolute;
        }
        .div2{
            width:80px;
            height:30px;
            background-color:blue;
            float:left;
            margin:5px;
        }
        .div1{
            width:150px;
            height:60px;
            background-color:gray;
            float:left;
            position:absolute;
            top:100px;
            left:200px;
        }
        .te1{
            width:80px;
            height:30px;
            background-color:blue;
            position:absolute;
            top:20px;
            left:30px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;div-box&quot;&gt;
        &lt;div class=&quot;div2&quot;&gt;div1&lt;/div&gt;
    &lt;div class=&quot;div1&quot;&gt;
        &lt;div class=&quot;te1&quot;&gt;div2&lt;/div&gt;
    &lt;/div&gt;
        &lt;div class=&quot;div2&quot;&gt;div3&lt;/div&gt;
        &lt;div class=&quot;div2&quot;&gt;div4&lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><ul>
<li>静态定位为默认定位方式</li>
<li>静态定位，对top、left、right、button都不生效。</li>
</ul>
<h3 id="fixed定位（固定定位）"><a href="#fixed定位（固定定位）" class="headerlink" title="fixed定位（固定定位）"></a>fixed定位（固定定位）</h3><ul>
<li>元素框的表现类似于position，设置为absolute，不过其包含块是窗口本身。</li>
</ul>
<h5 id="实现效果：-1"><a href="#实现效果：-1" class="headerlink" title="实现效果："></a>实现效果：</h5><p><img src="http://i.imgur.com/UsXePY1.png" alt=""></p>
<h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;fixed定位&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        .div1{
            width:300px;
            height:300px;
            border:1px solid red;
        }
        .div2{
            width:80px;
            height:50px;
            background-color:green;
            position:fixed;
            top:100px;
            left:100px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;div1&quot;&gt;
        hello world! &lt;br/&gt;
        hello world! &lt;br/&gt;
        hello world! &lt;br/&gt;
        hello world! &lt;br/&gt;
        &lt;div class=&quot;div2&quot;&gt;fixed定位&lt;/div&gt;    
    &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="关于left和top居中显示的问题"><a href="#关于left和top居中显示的问题" class="headerlink" title="关于left和top居中显示的问题"></a>关于left和top居中显示的问题</h3><ul>
<li>问题：请思考，如何把一个div放在body的中间（左右和上下居中）？</li>
</ul>
<h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><h5 id="实现效果：-2"><a href="#实现效果：-2" class="headerlink" title="实现效果："></a>实现效果：</h5><p><img src="http://i.imgur.com/aOwp54R.png" alt=""></p>
<h5 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h5><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;关于top和left居中的问题&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        .juzhong{
            position:absolute;
            width:300px;
            height:200px;
            background:blue;
            left:50%;
            margin-left:-150px;
            top:50%;
            margin-top:-100px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;juzhong&quot;&gt;我想居中显示&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h2 id="z-index（可以理解为空间上下的定位）"><a href="#z-index（可以理解为空间上下的定位）" class="headerlink" title="z-index（可以理解为空间上下的定位）"></a>z-index（可以理解为空间上下的定位）</h2><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><h5 id="效果"><a href="#效果" class="headerlink" title="效果:"></a>效果:</h5><p><img src="http://i.imgur.com/nbvJ4yp.png" alt=""></p>
<h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;z-index(空间定位)&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        .div-box{
            width:350px;
            height:200px;
            border:1px solid red;
        }
        .div-box img{
            border:1px solid black;
            margin:5px;
            position:absolute;
            z-index:0;
        }
        .div-box span{
            border:1px solid green;
            z-index:1;
            position:absolute;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;div-box&quot;&gt;
        &lt;img src=&quot;ali.jpg&quot; &gt;
        &lt;span&gt;我是阿里。&lt;/span&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>z-index和position:absolute配合使用</li>
<li>z-index默认值是0</li>
<li>z-index的值越大，越在上层</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定位-基本概念&quot;&gt;&lt;a href=&quot;#定位-基本概念&quot; class=&quot;headerlink&quot; title=&quot;定位-基本概念&quot;&gt;&lt;/a&gt;定位-基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基本概念：&lt;ul&gt;
&lt;li&gt;css定位(Positioning)属性允许你对元素进行定位
    
    </summary>
    
      <category term="Web前端" scheme="http://xiangcl.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="http://xiangcl.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html+css" scheme="http://xiangcl.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="http://xiangcl.com/tool-config/hexo-blog-build.html"/>
    <id>http://xiangcl.com/tool-config/hexo-blog-build.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<p>之前用wordpress做了一段时间的Bolg，后来才了解到Hexo。Hexo的好处就是配置灵活，简约而且轻巧，不会像wordpress那么一个庞然大物。所以干脆就将博客搬到了Hexo，而且还有免费的 github page 空间可以用。</p>
<p>搭建调试过程历经三天多。中间踩了很多坑，现一一记录下来，供诸君参考。</p>
<p>写到一半，中间有很多忘了，后面有空再补上吧。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h2><p>使用的是腾讯云主机，一块钱一个月。大家如果有还在上大学的亲戚或朋友也可以借他们的学生身份。<a href="https://www.qcloud.com/act/campus" target="_blank" rel="external">腾讯云学生优惠链接</a>，腾讯云是可以创建子帐号的，所以大家不比担心帐号的问题。</p>
<h2 id="软件："><a href="#软件：" class="headerlink" title="软件："></a>软件：</h2><pre><code>Centos 7.0      //云主机的系统
node  v6.2.0    //运行环境
git 1.8.3.1     //必备软件
MarkdownPad 2   //md写作工具
Xhell 5         //linux的远程终端
FileZilla v3.21.0   //FTP软件
</code></pre><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="云主机"><a href="#云主机" class="headerlink" title="云主机"></a>云主机</h2><p>很简单，自行解决。</p>
<h2 id="Node环境"><a href="#Node环境" class="headerlink" title="Node环境"></a>Node环境</h2><p>Nodejs中文官网：<a href="http://nodejs.cn/" target="_blank" rel="external">http://nodejs.cn/</a></p>
<pre><code># sudo yum install gcc gcc-c++  //安装编译软件
# wget https://nodejs.org/dist/v6.2.0/node-v6.2.0.tar.gz    //下载源码
# tar xzvf node-v6.2.0.tar.gz   //解压源码
# cd node-v6.2.0/   //进入解压目录
# ./configure   //编译&amp;&amp;安装
# make
# make install
# node -v   //查看node版本
# npm -v    //查看npm版本
</code></pre><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><pre><code>$ sudo yum install git
</code></pre><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>Hexo中文官网：<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a>（上面有详细教程）</p>
<pre><code>$ npm install -g hexo-cli
</code></pre><p>上面是官方的安装办法，我登了许久都没有反应，后来才知道可能是墙的原因。后来更换了<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝npm镜像</a>，安装方法：</p>
<pre><code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre><p>因为更换了npm源所以在<code>npm</code>命令的前面都要加<code>c</code>,即为<code>cnpm</code></p>
<p>再次安装Hexo：</p>
<pre><code>$ sudo cnpm install -g hexo-cli
$ mkdir /home/blog
$ cd /home/
$ hexo init blog
$ cd blog
$ cnpm install
$ hexo server
</code></pre><p>经过上面的操作后，会在本地<code>/home</code>下新建一个<code>/blog</code>的目录，并在该文件夹下生成所需的文件。</p>
<p>默认产生的目录结构如下：</p>
<pre><code>.
|-- _config.yml
|-- db.json
|-- debug.log
|-- node_modules
|-- package.json
|-- public
|-- scaffolds
|-- source
`-- themes
</code></pre><table>
<thead>
<tr>
<th>目录</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>_config.yol</td>
<td style="text-align:center">网站的配置信息</td>
</tr>
<tr>
<td>package.json</td>
<td style="text-align:center">应用程序的信息</td>
</tr>
<tr>
<td>publice</td>
<td style="text-align:center">执行hexo generate命令，输出的静态网页内容目录</td>
</tr>
<tr>
<td>scaffolds</td>
<td style="text-align:center">模版文件夹</td>
</tr>
<tr>
<td>source</td>
<td style="text-align:center">资源文件夹</td>
</tr>
<tr>
<td>themes</td>
<td style="text-align:center">主题文件夹</td>
</tr>
</tbody>
</table>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><pre><code>hexo new &quot;postName&quot;     #新建名为postName的文章
hexo new page &quot;pageName&quot;    #新建名为pageName页面
hexo generate   #生成静态页面至public目录
hexo server     #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）
hexo deploy     #将.deploy目录部署到GitHub

hexo clean  #清楚缓存文件(`db.json`)和已生产的静态文件(public)
hexo list &lt;type&gt;    #列出网站资料
hexo version    #显示hexo版本
</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>基本的配置可以参考官网</p>
<h2 id="先写这么多吧，后面的有点忘了，等有空补上"><a href="#先写这么多吧，后面的有点忘了，等有空补上" class="headerlink" title="先写这么多吧，后面的有点忘了，等有空补上"></a>先写这么多吧，后面的有点忘了，等有空补上</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用wordpress做了一段时间的Bolg，后来才了解到Hexo。Hexo的好处就是配置灵活，简约而且轻巧，不会像wordpress那么一个庞然大物。所以干脆就将博客搬到了Hexo，而且还有免费的 github page 空间可以用。&lt;/p&gt;
&lt;p&gt;搭建调试过程历经三天
    
    </summary>
    
      <category term="工具配置" scheme="http://xiangcl.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="http://xiangcl.com/tags/Hexo/"/>
    
      <category term="博客搭建" scheme="http://xiangcl.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>武汉印象</title>
    <link href="http://xiangcl.com/graphic-works/graphic-works-WuHanEffect.html"/>
    <id>http://xiangcl.com/graphic-works/graphic-works-WuHanEffect.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="武汉是一座我呆了一段时间的城市，每每回忆起来。总能有一种割舍不掉的情怀，只能以此怀念。"><a href="#武汉是一座我呆了一段时间的城市，每每回忆起来。总能有一种割舍不掉的情怀，只能以此怀念。" class="headerlink" title="武汉是一座我呆了一段时间的城市，每每回忆起来。总能有一种割舍不掉的情怀，只能以此怀念。"></a>武汉是一座我呆了一段时间的城市，每每回忆起来。总能有一种割舍不掉的情怀，只能以此怀念。</h2><p><img src="http://i.imgur.com/LXcnDza.png" alt=""></p>
<p><img src="http://i.imgur.com/KO439a0.png" alt=""></p>
<p><img src="http://i.imgur.com/E4UjHXp.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;武汉是一座我呆了一段时间的城市，每每回忆起来。总能有一种割舍不掉的情怀，只能以此怀念。&quot;&gt;&lt;a href=&quot;#武汉是一座我呆了一段时间的城市，每每回忆起来。总能有一种割舍不掉的情怀，只能以此怀念。&quot; class=&quot;headerlink&quot; title=&quot;武汉是一座我
    
    </summary>
    
      <category term="平面作品" scheme="http://xiangcl.com/categories/%E5%B9%B3%E9%9D%A2%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="武汉" scheme="http://xiangcl.com/tags/%E6%AD%A6%E6%B1%89/"/>
    
      <category term="平面作品" scheme="http://xiangcl.com/tags/%E5%B9%B3%E9%9D%A2%E4%BD%9C%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>编辑器之神-VIM</title>
    <link href="http://xiangcl.com/tool-config/god-editor-vim.html"/>
    <id>http://xiangcl.com/tool-config/god-editor-vim.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在这天地间，流传这两大神器的故事：据说Emacs是神的编辑器，而Vim是编辑器之神。正所谓，工欲善其事,必先利其器。今天就和大家分享一下关于编辑器之神Vim的传说。</p>
</blockquote>
<h2 id="一、Vim的历史"><a href="#一、Vim的历史" class="headerlink" title="一、Vim的历史"></a>一、Vim的历史</h2><h3 id="1-下图是关于几款主流编辑器的学习曲线-注：图片来自互联网"><a href="#1-下图是关于几款主流编辑器的学习曲线-注：图片来自互联网" class="headerlink" title="1.下图是关于几款主流编辑器的学习曲线:(注：图片来自互联网)"></a>1.下图是关于几款主流编辑器的学习曲线:<em>(注：图片来自互联网)</em></h3><ul>
<li><img src="http://i.imgur.com/PomSdCa.jpg" alt=""></li>
</ul>
<h3 id="2-VIM-Vi-IMproved"><a href="#2-VIM-Vi-IMproved" class="headerlink" title="2.VIM - Vi IMproved"></a>2.VIM - Vi IMproved</h3><h3 id="3-上图中vi即是vim的前身"><a href="#3-上图中vi即是vim的前身" class="headerlink" title="3.上图中vi即是vim的前身"></a>3.上图中vi即是vim的前身</h3><ul>
<li>VI：Visual Interface</li>
</ul>
<h3 id="4-VIM和VI是文本编辑器"><a href="#4-VIM和VI是文本编辑器" class="headerlink" title="4.VIM和VI是文本编辑器"></a>4.VIM和VI是文本编辑器</h3><ul>
<li><strong>何为文本文件？</strong><ul>
<li>文本文件一般指只有字符原生编码构成的二进制计算机文件，与富文本相比，其不包含字样样式的控制元素，能够被最简单的文本编辑器直接读取</li>
</ul>
</li>
<li><strong>文本文件常见的格式？</strong><ul>
<li>ASCII、MIME、.txt、…</li>
</ul>
</li>
<li><strong>那么，何为文本编辑器？</strong><ul>
<li>文本编辑器是计算机软件中的一种。主要用于用来编写和查看文本文件。</li>
</ul>
</li>
<li><strong>文本编辑器的种类：</strong><ul>
<li><strong>行编辑器</strong>：sed</li>
<li><strong>全屏编辑器</strong>：nano、vi、vim</li>
</ul>
</li>
</ul>
<h2 id="二、Vim编辑器的基本操作"><a href="#二、Vim编辑器的基本操作" class="headerlink" title="二、Vim编辑器的基本操作"></a>二、Vim编辑器的基本操作</h2><h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h3><ol>
<li><p>VIM：模式化的编辑器</p>
</li>
<li><p>基本模式</p>
<ul>
<li><strong>编辑模式</strong> （命令模式）</li>
<li><strong>输入模式</strong> （插入模式）</li>
<li><strong>末行模式</strong> （vim内置的命令行接口）</li>
<li><em>Note</em>：打开的时候<strong>默认</strong>的模式是编辑模式</li>
</ul>
</li>
<li><p>打开文件</p>
<ul>
<li><code># vim [OPTION]... FILE...</code></li>
<li><code>+#</code>：打开文件后，直接让光标处于第#行的行首</li>
<li><code>+/PATTERN</code>：打开文件后，直接让光标处于第一个被PATTERN匹配到的行的行首；</li>
</ul>
</li>
<li><p>模式转换</p>
</li>
</ol>
<ul>
<li>模式转换：<ul>
<li><em>编辑模式 - - &gt; 输入模式</em><ul>
<li><code>i</code>：<em>insert</em>，在光标所在处<strong>前面</strong>插入；</li>
<li><code>a</code>：<em>append</em>，在光标所在处的<strong>后面</strong>插入；</li>
<li><code>o</code>：<em>open</em>，在当前光标所在行的<strong>下一行</strong>打开新行，并转换为输入模式；</li>
<li><code>I</code>：在当前光标所在行的<strong>行首</strong>输入；</li>
<li><code>A</code>：在当前光标所在行的<strong>行尾</strong>输入；</li>
<li><code>O</code>：在光标所在行的<strong>上一行</strong>打开一个新行，并转换为输入模式；</li>
</ul>
</li>
<li><em>输入模式 - - &gt; 编辑模式</em><ul>
<li><code>ESC</code></li>
</ul>
</li>
<li><em>编辑模式 - - &gt; 末行模式</em><ul>
<li><code>：</code></li>
</ul>
</li>
<li><em>末行模式 - - &gt; 编辑模式</em><ul>
<li><code>ESC</code></li>
</ul>
</li>
<li>关闭文件<ul>
<li><code>:q</code>：退出</li>
<li><code>:!</code>：强制退出，丢弃做出的修改；</li>
<li><code>:wq</code>：保存退出；</li>
<li><code>:x</code>：保存退出；</li>
<li><code>:w /PATH/TO/SOMEWHERE</code>：当前编辑的文本保存到别的文件；</li>
<li><code>ZZ</code>：保存退出；</li>
</ul>
</li>
</ul>
</li>
<li>图示说明如下： <em>（转载请注明出处）</em><ul>
<li><img src="http://i.imgur.com/Qsy3Rmx.png" alt=""></li>
</ul>
</li>
</ul>
<h3 id="2-光标跳转："><a href="#2-光标跳转：" class="headerlink" title="2. 光标跳转："></a>2. 光标跳转：</h3><ol>
<li>字符间跳转：<ul>
<li><code>h，j，k，l</code><ul>
<li><code>h</code>：<strong>左</strong></li>
<li><code>l</code>：<strong>右</strong></li>
<li><code>k</code>：<strong>上</strong></li>
<li><code>j</code>：<strong>下</strong></li>
</ul>
</li>
<li><code>#COMMAND</code>：跳转由#指定的个数的字符；</li>
</ul>
</li>
<li>单词间跳转：<ul>
<li><code>w</code>：跳转至下一个单词或后一个单词的<strong>词首</strong>；</li>
<li><code>e</code>：跳转至当前或下一个单词的<strong>词尾</strong>；</li>
<li><code>b</code>：跳转至当前或上一个单词的<strong>词首</strong>；</li>
<li><code>#COMMAND</code>：由#指定一次跳转的单词数；</li>
</ul>
</li>
<li>行首行尾跳转：<ul>
<li><code>^</code>：跳转至<strong>行首</strong>的第一个非空白字符；</li>
<li><code>0</code>：跳转至绝对的<strong>行首</strong>；</li>
<li><code>$</code>：跳转至绝对<strong>行尾</strong>；</li>
</ul>
</li>
<li>行间移动：<ul>
<li><code>#G</code>：跳转至由#指定行；</li>
<li><code>G</code>：跳转至最后一行；</li>
<li><code>1G</code>，<code>gg</code>：跳转至第一行；</li>
</ul>
</li>
<li>句间移动：<ul>
<li><code>)</code>：跳转至下一个句子；</li>
<li><code>(</code>：跳转至上一个句子；</li>
</ul>
</li>
<li>段落间移动：<ul>
<li><code>}</code>：跳转至下一段</li>
<li><code>{</code>：跳转至上一段</li>
</ul>
</li>
</ol>
<h3 id="3-vim的编辑命令："><a href="#3-vim的编辑命令：" class="headerlink" title="3. vim的编辑命令："></a>3. vim的编辑命令：</h3><ol>
<li>字符编辑：<ul>
<li><code>x</code>：删除光标处的单个字符；</li>
<li><code>#x</code>：删除光标处起始的#个字符；</li>
<li><code>xp</code>：交换光标所在处的字符及其后面字符的位置；</li>
</ul>
</li>
<li>替换命令：<ul>
<li><code>r</code>，<em>replace</em></li>
<li><code>r</code>：替换光标所在处的字符；（单字符替换）</li>
</ul>
</li>
<li>删除命令：<ul>
<li><code>d</code>：删除命令，可结合光标跳转字符，实现范围删除；<ul>
<li><code>d$</code>：删除至绝对行尾</li>
<li><code>d^</code>：删除至行首的第一个非空白字符</li>
<li><code>d0</code>：删除至绝对行首</li>
</ul>
</li>
<li><code>dd</code>：删除光标所在行；<ul>
<li><code>#dd</code>：向下删除#行；</li>
</ul>
</li>
</ul>
</li>
<li>粘贴命令：<ul>
<li>（<code>p</code>，put，paste）</li>
<li><code>p</code>：缓冲区中存储的如果为整行内容，则粘贴至当前光标所在行的<strong>下</strong>方；否则，则粘贴至当前光标所在处的<strong>后</strong>面；</li>
<li><code>P</code>：缓冲区中存储的如果为整行内容，则粘贴至当前光标所在行的<strong>上</strong>方；否则，则粘贴至当前光标所在处的<strong>前</strong>面；</li>
</ul>
</li>
<li>复制命令：<ul>
<li><code>y</code>，<em>yank</em></li>
<li><code>y</code>：复制，工作行行为相似于d命令；<ul>
<li><code>y$</code>：复制至绝对行尾</li>
<li><code>y0</code>：复制至绝对行首</li>
<li><code>y^</code>：复制至行首的第一个非空白字符</li>
<li><code>yy</code>：复制整行<ul>
<li><code>#yy</code>：复制多行；</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>改变命令：<ul>
<li><code>c</code>，<em>change</em></li>
<li><code>c</code>：修改<ul>
<li><em>编辑模式 - -&gt; 输入模式</em></li>
</ul>
</li>
<li><code>cc</code>：删除并输入新内容</li>
<li><code>#cc</code>：一次删除#行</li>
</ul>
</li>
</ol>
<h2 id="三、其它编辑操作"><a href="#三、其它编辑操作" class="headerlink" title="三、其它编辑操作"></a>三、其它编辑操作</h2><h3 id="1-可视化模式"><a href="#1-可视化模式" class="headerlink" title="1.可视化模式"></a>1.可视化模式</h3><ul>
<li><code>v</code>：按字符选定</li>
<li><code>V</code>：按行选定</li>
<li><strong>Note</strong>：经常结合编辑命令；</li>
</ul>
<h3 id="2-撤销此前的编辑："><a href="#2-撤销此前的编辑：" class="headerlink" title="2. 撤销此前的编辑："></a>2. 撤销此前的编辑：</h3><ul>
<li><code>u</code><em>(undo)</em>：撤销此前的操作；<ul>
<li><code>#u</code>：撤销指定次数的操作；</li>
</ul>
</li>
<li>撤销此前的撤销：<ul>
<li>Ctrl+r</li>
</ul>
</li>
<li>重复前一个编辑操作：<ul>
<li><code>.</code></li>
</ul>
</li>
</ul>
<h2 id="四、翻屏操作"><a href="#四、翻屏操作" class="headerlink" title="四、翻屏操作"></a>四、翻屏操作</h2><ul>
<li><code>Ctrl+f</code>：向文件尾部翻一屏；</li>
<li><p><code>Ctrl+b</code>：向文件首部翻一屏；</p>
</li>
<li><p><code>Ctrl+d</code>：向文件尾部翻半屏；</p>
</li>
<li><p><code>Ctrl+u</code>：向文件首部翻半屏；</p>
</li>
<li><p><strong>vim自带的练习教程</strong>：</p>
<ul>
<li><code>vimtutor</code></li>
</ul>
</li>
</ul>
<h2 id="五、vim的末行模式"><a href="#五、vim的末行模式" class="headerlink" title="五、vim的末行模式"></a>五、vim的末行模式</h2><ul>
<li><strong>内建的命令行接口</strong>；</li>
<li><strong>特性</strong>：</li>
<li><strong>(1). 地址定界</strong><ul>
<li><code>：start_pos,end_pos</code></li>
<li><code>#：</code>具体的第#行，例如：2表示第2行；</li>
<li><code>#，#</code>：从左侧#表示起始，到右侧#表示结束；</li>
<li><code>#,+#</code>：从左侧#表示的行开始，加上右侧#表示的行数；</li>
<li><code>.</code>当前行；</li>
<li><code>$</code>：最后一行；</li>
<li><code>%</code>：全文；相当于（1,$）</li>
<li><code>/pat1/,/pat2/</code>：表示从第一次被pat1匹配到的行开始，一直到pat2匹配到的行结束</li>
<li><strong>使用方式</strong>：<ul>
<li>后跟一个编辑命令：<ul>
<li><code>d</code>：删除指定范围的内容</li>
<li><code>y</code>：复制指定范围的内容</li>
<li><code>w /PATH/TO/SOMEWHERE</code>：将范围内的行另存至指定文件中；</li>
<li><code>r /PATH/FROM/SOMEFILE</code>：在指定位置插入指定文件中的所有内容；</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>(2). 查找</strong><ul>
<li><code>/PATTERN</code>：从当前光标所在处向文件尾部查找</li>
<li><code>?PATTERN</code>：从当前光标所在处向文件首部查找<ul>
<li><code>n</code>：与命令同方向；</li>
<li><code>N</code>：与命令反方向；</li>
</ul>
</li>
</ul>
</li>
<li><strong>(3). 查找并替换</strong><ul>
<li><code>s</code>：在末行模式下完成查找替换操作<ul>
<li><code>s/要查找的内容/替换为的内容/修饰符</code><ul>
<li>要查找的内容：可使用模式；</li>
<li>替换为的内容：不能使用模式，但可以使用\1, \2, …等后向引用符号；好可以使用<code>&quot;&amp;&quot;</code>引用前面查找时查找到的整个内容；</li>
<li>修饰符：<ul>
<li><code>i</code>：忽略大小写</li>
<li><code>g</code>：全局替换;默认情况下，没一行只替换第一次出现的内容；</li>
</ul>
</li>
</ul>
</li>
<li>查找替换中的分隔符<code>/</code>可替换为其它字符，例如：<ul>
<li><code>s@@@</code></li>
<li><code>s###</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="六、vim的文件模式"><a href="#六、vim的文件模式" class="headerlink" title="六、vim的文件模式"></a>六、vim的文件模式</h2><h3 id="1-多文件模式"><a href="#1-多文件模式" class="headerlink" title="1. 多文件模式"></a>1. 多文件模式</h3><ul>
<li><em>vim FILE1 FILE2 FILE3 …</em><ul>
<li><code>:next</code> 切换至下一个文本</li>
<li><code>:prev</code> 切换至前一个文本</li>
<li><code>:first</code> 切换至前一个文本</li>
<li><code>:last</code> 切换至最后一个文本</li>
<li><code>:wall</code> 保存所有</li>
<li><code>:qall</code> 退出所有</li>
</ul>
</li>
</ul>
<h3 id="2-窗口分隔模式"><a href="#2-窗口分隔模式" class="headerlink" title="2. 窗口分隔模式"></a>2. 窗口分隔模式</h3><ul>
<li><em>vim -o|-O FILE1 FILE2 …</em><ul>
<li><code>-o</code>：水平分割<ul>
<li><img src="http://i.imgur.com/PFTgCJ0.png" alt=""></li>
</ul>
</li>
<li><code>-O</code>：垂直分割<ul>
<li><img src="http://i.imgur.com/h4I4Wxi.png" alt=""></li>
</ul>
</li>
<li><strong>在窗口间切换</strong>：<code>Ctrl+w，Arrow</code></li>
</ul>
</li>
</ul>
<h3 id="3-单文件窗口分割："><a href="#3-单文件窗口分割：" class="headerlink" title="3. 单文件窗口分割："></a>3. 单文件窗口分割：</h3><ul>
<li><code>Ctrl+w，s</code>：split，水平分割</li>
<li><code>Ctrl+w，v</code>：vertical，垂直分割</li>
</ul>
<h3 id="4-定制vim的工作特性：（部分）"><a href="#4-定制vim的工作特性：（部分）" class="headerlink" title="4. 定制vim的工作特性：（部分）"></a>4. 定制vim的工作特性：（<em>部分</em>）</h3><ul>
<li><strong>配置文件</strong>：（永久有效）<ul>
<li><strong>全局</strong>：<code>/etc/vimrc</code></li>
<li><strong>个人</strong>：<code>~/.vimrc</code>   (默认不存在，需要自己创建)</li>
</ul>
</li>
<li><strong>末行</strong>：（当前vim进程有效）</li>
<li><strong>(1) 行号</strong>：<ul>
<li><strong>显示</strong>：<code>set number</code>，简写为：<code>set nu</code></li>
<li><strong>取消显示</strong>：<code>set nonumber</code>，简写为：<code>set nonu</code></li>
</ul>
</li>
<li><strong>(2) 括号匹配</strong>：<ul>
<li><strong>匹配</strong>：<code>set showmatch</code>，简写为：<code>set sm</code></li>
<li><strong>取消匹配</strong>：<code>set nosm</code></li>
</ul>
</li>
<li><strong>(3) 自动缩进</strong>：<ul>
<li><strong>开启</strong>：<code>set ai</code></li>
<li><strong>禁用</strong>：<code>set noai</code></li>
</ul>
</li>
<li><strong>(4) 高亮搜索</strong><ul>
<li><strong>开启</strong>：<code>set hlsearch</code></li>
<li><strong>禁用</strong>：<code>set nohlsearch</code></li>
</ul>
</li>
<li><strong>(5) 语法高亮</strong><ul>
<li><strong>开启</strong>：<code>syntax on</code></li>
<li><strong>禁用</strong>：<code>syntax off</code></li>
</ul>
</li>
<li><strong>(6) 忽略字符大小写</strong><ul>
<li><strong>启用</strong>：<code>set ic</code></li>
<li><strong>禁用</strong>：<code>set noic</code></li>
</ul>
</li>
</ul>
<h3 id="5-书籍推荐：《Vim-handbook-cn-72》"><a href="#5-书籍推荐：《Vim-handbook-cn-72》" class="headerlink" title="5. 书籍推荐：《Vim-handbook-cn-72》"></a>5. 书籍推荐：《Vim-handbook-cn-72》</h3><h3 id="6-获取帮助"><a href="#6-获取帮助" class="headerlink" title="6. 获取帮助"></a>6. 获取帮助</h3><ul>
<li>在末行模式下：<code>help SUBJECT</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在这天地间，流传这两大神器的故事：据说Emacs是神的编辑器，而Vim是编辑器之神。正所谓，工欲善其事,必先利其器。今天就和大家分享一下关于编辑器之神Vim的传说。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、Vim的历史&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="工具配置" scheme="http://xiangcl.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="VIM" scheme="http://xiangcl.com/tags/VIM/"/>
    
      <category term="编辑器" scheme="http://xiangcl.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件与目录管理2</title>
    <link href="http://xiangcl.com/Linux/linux-file-dir-man-two.html"/>
    <id>http://xiangcl.com/Linux/linux-file-dir-man-two.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件和目录的默认权限与隐藏权限"><a href="#文件和目录的默认权限与隐藏权限" class="headerlink" title="文件和目录的默认权限与隐藏权限"></a>文件和目录的默认权限与隐藏权限</h2><h3 id="文件默认权限：-umask"><a href="#文件默认权限：-umask" class="headerlink" title="文件默认权限： umask"></a>文件默认权限： umask</h3><p>umask：指定目前使用者在创建文件或目录时的权限默认值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[xiangcl@centos-rpi3 ~]$ umask</div><div class="line">0002                                # 与一般权限有关是后三位数字</div><div class="line">[xiangcl@centos-rpi3 ~]$ umask -S</div><div class="line">u=rwx,g=rwx,o=rx</div><div class="line">[xiangcl@centos-rpi3 ~]$ su -</div><div class="line">密码：</div><div class="line">上一次登录：一 11月 14 05:53:08 UTC 2016pts/0 上</div><div class="line">[root@centos-rpi3 ~]# umask</div><div class="line">0022                                # 基于安全的考量， root默认的是022</div><div class="line">[root@centos-rpi3 ~]# umask -S</div><div class="line">u=rwx,g=rx,o=rx</div></pre></td></tr></table></figure>
<p><em>Note：umask的第一组数字是特殊权限使用。</em></p>
<p>在默认权限的属性上，目录与文件是不一样的。x 权限对于目录是非常重要的！ 但是一般文件的创建则不应该有执行的权限，因为一般文件通常是用在于数据的记录嘛！当然不需要执行的权限了。 因此，默认的情况如下：</p>
<ul>
<li><p>若使用者创建为“文件”则默认“没有可执行（x ） 权限”，亦即只有 rw 这两个项目，也就是最大为 666 分，默认权限如下： -rw-rw-rw-</p>
</li>
<li><p>若使用者创建为“目录”，则由于 x 与是否可以进入此目录有关，因此默认为所有权限均开放，亦即为 777 分，默认权限如下： drwxrwxrwx</p>
</li>
</ul>
<p>因为 umask 为 022 ，所以 user 并没有被拿掉任何权限，不过 group 与 others 的权限被拿掉了 2 （ 也就是 w 这个权限） ，那么当使用者：</p>
<ul>
<li>创建文件时：（ -rw-rw-rw-） - （ —–w–w-） ==&gt; -rw-r–r–</li>
<li>创建目录时：（ drwxrwxrwx） - （ d—-w–w-） ==&gt; drwxr-xr-x</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@centos-rpi3 ~]# umask</div><div class="line">0022</div><div class="line">[root@centos-rpi3 ~]# touch test1</div><div class="line">[root@centos-rpi3 ~]# mkdir test2</div><div class="line">[root@centos-rpi3 ~]# ll -d test*</div><div class="line">-rw-r--r--. 1 root root    0 11月 14 06:04 test1</div><div class="line">drwxr-xr-x. 2 root root 4096 11月 14 06:04 test2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">umask #   :     设定</div><div class="line"></div><div class="line">范例一：修改默认的 umask 的值</div><div class="line">[root@centos-rpi3 ~]# umask 002</div><div class="line">[root@centos-rpi3 ~]# touch test3</div><div class="line">[root@centos-rpi3 ~]# mkdir test4</div><div class="line">[root@centos-rpi3 ~]# ll -d test[34]</div><div class="line">-rw-rw-r--. 1 root root    0 11月 14 06:10 test3</div><div class="line">drwxrwxr-x. 2 root root 4096 11月 14 06:10 test4</div></pre></td></tr></table></figure>
<p><em>Note： umask对于新建文件与目录的默认权限是很重要的</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">例题：假设你的 umask 为003，请问该 umask 情况下，创建的文件和目录的权限为？</div><div class="line"></div><div class="line">umask 为 003</div><div class="line">所以拿掉的权限为：</div><div class="line">--------wx</div><div class="line"></div><div class="line">文件：</div><div class="line">-rw-rw-rw-</div><div class="line">-</div><div class="line">--------wx</div><div class="line">=</div><div class="line">-rw-rw-r--</div><div class="line"></div><div class="line">目录：</div><div class="line">drwxrwxrwx</div><div class="line">-</div><div class="line">d-------wx</div><div class="line">=</div><div class="line">drwxrwxr--</div></pre></td></tr></table></figure>
<h3 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h3><p><em>下面的 chattr 指令只能在Ext2/Ext3/Ext4 的Linux传统文件系统上面完整的生效，其它文件系统不能完整支持。</em></p>
<h4 id="chattr-（设置文件隐藏属性）"><a href="#chattr-（设置文件隐藏属性）" class="headerlink" title="chattr （设置文件隐藏属性）"></a>chattr （设置文件隐藏属性）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> chattr [ -RV ] [ -v version ] [ mode ] files...</div><div class="line">OPTION：</div><div class="line">选项与参数：</div><div class="line">+ ：增加某一个特殊参数，其他原本存在参数则不动。</div><div class="line">- ：移除某一个特殊参数，其他原本存在参数则不动。</div><div class="line">= ：设置一定，且仅有后面接的参数</div><div class="line"></div><div class="line">A ：当设置了 A 这个属性时，若你有存取此文件（ 或目录） 时，他的存取时间 atime 将不会被修改，</div><div class="line">可避免 I/O 较慢的机器过度的存取磁盘。（ 目前建议使用文件系统挂载参数处理这个项目）</div><div class="line">S ：一般文件是非同步写入磁盘的（ 原理请参考[前一章sync](../Text/index.html#sync)的说明） ，如果加上 S 这个属性时，</div><div class="line">当你进行任何文件的修改，该更动会“同步”写入磁盘中。</div><div class="line">a ：当设置 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有root 才能设置这属性</div><div class="line">c ：这个属性设置之后，将会自动的将此文件“压缩”，在读取的时候将会自动解压缩，</div><div class="line">但是在储存的时候，将会先进行压缩后再储存（ 看来对于大文件似乎蛮有用的！）</div><div class="line">d ：当 dump 程序被执行的时候，设置 d 属性将可使该文件（ 或目录） 不会被 dump 备份</div><div class="line">i ：这个 i 可就很厉害了！他可以让一个文件“不能被删除、改名、设置链接也无法写入或新增数据！”</div><div class="line">对于系统安全性有相当大的助益！只有 root 能设置此属性</div><div class="line">s ：当文件设置了 s 属性时，如果这个文件被删除，他将会被完全的移除出这个硬盘空间，</div><div class="line">所以如果误删了，完全无法救回来了喔！</div><div class="line">u ：与 s 相反的，当使用 u 来设置文件时，如果该文件被删除了，则数据内容其实还存在磁盘中，</div><div class="line">可以使用来救援该文件喔！</div><div class="line">注意1：属性设置常见的是 a 与 i 的设置值，而且很多设置值必须要身为 root 才能设置</div><div class="line">注意2：xfs 文件系统仅支持 AadiS 而已</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">范例一：尝试在 /tmp 下创建文件，并加入 i 的参数，然后删除看看</div><div class="line">[root@centos-rpi3 ~]# cd /tmp/</div><div class="line">[root@centos-rpi3 tmp]# ls</div><div class="line">[root@centos-rpi3 tmp]# touch attrtest</div><div class="line">[root@centos-rpi3 tmp]# chattr +i attrtest</div><div class="line">[root@centos-rpi3 tmp]# rm attrtest</div><div class="line">rm：是否删除普通空文件 &quot;attrtest&quot;？y</div><div class="line">rm: 无法删除&quot;attrtest&quot;: 不允许的操作</div><div class="line"># 是不是无法删除？</div><div class="line"></div><div class="line"># 取消 -i 属性又能删除了</div><div class="line">[root@centos-rpi3 tmp]# chattr -i attrtest</div><div class="line">[root@centos-rpi3 tmp]# rm attrtest</div><div class="line">rm：是否删除普通空文件 &quot;attrtest&quot;？y</div></pre></td></tr></table></figure>
<h4 id="lsattr-（显示文件隐藏属性）"><a href="#lsattr-（显示文件隐藏属性）" class="headerlink" title="lsattr     （显示文件隐藏属性）"></a>lsattr     （显示文件隐藏属性）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">lsattr [ -RVadv ] [ files...  ]</div><div class="line">OPTION:</div><div class="line">-a ：将隐藏文件的属性也秀出来；</div><div class="line">-d ：如果接的是目录，仅列出目录本身的属性而非目录内的文件名；</div><div class="line">-R ：连同子目录的数据也一并列出来！</div><div class="line"></div><div class="line">[root@centos-rpi3 tmp]# chattr +aiS attrtest</div><div class="line">[root@centos-rpi3 tmp]# lsattr attrtest</div><div class="line">--S-ia-------e-- attrtest</div></pre></td></tr></table></figure>
<h3 id="文件特殊权限：SUID，SGIG-SBIT"><a href="#文件特殊权限：SUID，SGIG-SBIT" class="headerlink" title="文件特殊权限：SUID，SGIG, SBIT"></a>文件特殊权限：SUID，SGIG, SBIT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@centos-rpi3 tmp]# ls -ld /tmp; ls -l /usr/bin/passwd</div><div class="line">drwxrwxrwt. 7 root root 4096 11月 14 06:38 /tmp</div><div class="line">-rwsr-xr-x. 1 root root 27236 5月  23 2015 /usr/bin/passwd</div></pre></td></tr></table></figure>
<p>权限里竟然冒出了 t 和 s。</p>
<h4 id="Set-UID"><a href="#Set-UID" class="headerlink" title="Set UID"></a>Set UID</h4><p>当 s 这个标志出现在文件拥有者的 x 权限上时，例如刚刚提到的 /usr/bin/passwd 这个文件的权限状态：“-rwsr-xr-x”，此时就被称为 Set UID，简称为 SUID 的特殊权限。 那么SUID的权限对于一个文件的特殊功能是什么呢？基本上SUID有这样的限制与功能：</p>
<ul>
<li>SUID 权限仅对二进制程序（ binary program） 有效；</li>
<li>执行者对于该程序需要具有 x 的可执行权限；</li>
<li>本权限仅在执行该程序的过程中有效 （ run-time） ；</li>
<li>执行者将具有该程序拥有者 （ owner） 的权限。</li>
</ul>
<p>例：我们的 Linux 系统中，所有帐号的密码都记录在 /etc/shadow 这个文件里面，这个文件的权限为：“———- 1 root root”，意思是这个文件仅有root可读且仅有root可以强制写入而已。既然这个文件仅有 root 可以修改，那么自己的帐号这种一般帐号使用者能否自行修改自己的密码呢？ 你可以使用你自己的帐号输入“passwd”这个指令来看看。一般使用者当然可以修改自己的密码了！</p>
<p><em>SUID对目录无效</em></p>
<h4 id="Set-GID"><a href="#Set-GID" class="headerlink" title="Set GID"></a>Set GID</h4><p>默认情况下，用户创建文件时，其属组为此用户所属的基本组；</p>
<p>一旦某目录被设定了SGID，则对此目录有写权限的用户在此目录中创建的文件所属的组为此目录的属组；</p>
<p>权限设定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod g+s DIR...</div><div class="line">chmod g-s DIR...</div></pre></td></tr></table></figure></p>
<p>对文件来说，SGID有如下功能：</p>
<ul>
<li>SGID 对二进制程序有用；</li>
<li>程序执行者对于该程序来说，需具备 x 的权限；</li>
<li>执行者在执行的过程中将会获得该程序群组的支持！</li>
</ul>
<p>对目录来说，SGID有如下功能：</p>
<ul>
<li>使用者若对于此目录具有 r 与 x 的权限时，该使用者能够进入此目录；</li>
<li>使用者在此目录下的有效群组（ effective group） 将会变成该目录的群组；</li>
<li>用途：若使用者在此目录下具有 w 的权限（ 可以新建文件） ，则使用者所创建的新文件，该新文件的群组与此目录的群组相同。</li>
</ul>
<h4 id="Sticky"><a href="#Sticky" class="headerlink" title="Sticky"></a>Sticky</h4><p>SBIT 目前只针对目录有效，对于文件已经没有效果了。SBIT 对于目录的作用是：</p>
<ul>
<li>当使用者对于此目录具有 w, x 权限，亦即具有写入的权限时；</li>
<li>当使用者在该目录下创建文件或目录时，仅有自己与 root 才有权力删除该文件</li>
</ul>
<p>对于一个多人可写的目录，如果设置了sticky，则每个用户仅能删除自己的文件；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">权限设定：</div><div class="line">	chmod o+t DIR...</div><div class="line">	chmod o-t DIR...</div><div class="line"></div><div class="line">SUID SGID STICKY</div><div class="line">	000 0</div><div class="line">	001 1</div><div class="line">	010 2</div><div class="line">	011 3</div><div class="line">	100 4</div><div class="line">	101 5</div><div class="line">	110 6</div><div class="line">	111 7</div><div class="line"></div><div class="line">	chmod 4777 /tmp/a.txt</div><div class="line"></div><div class="line">几个权限位映射：</div><div class="line">	SUID: user, 占据属主的执行权限位；</div><div class="line">		s: 属主拥有x权限</div><div class="line">		S：属主没有x权限</div><div class="line">	SGID: group,  占据group的执行权限位；</div><div class="line">		s: group拥有x权限</div><div class="line">		S：group没有x权限</div><div class="line">	Sticky: other, 占据ohter的执行权限位；</div><div class="line">		t: other拥有x权限</div><div class="line">		T：other没有x权限</div></pre></td></tr></table></figure>
<h2 id="指令与文件的搜索"><a href="#指令与文件的搜索" class="headerlink" title="指令与文件的搜索"></a>指令与文件的搜索</h2><h3 id="指令文件名的搜索"><a href="#指令文件名的搜索" class="headerlink" title="指令文件名的搜索"></a>指令文件名的搜索</h3><p>在终端机模式当中，连续输入两次[tab]按键就能够知道使用者有多少指令可以下达。那你知不知道这些指令的完整文件名放在哪里？</p>
<h4 id="which-（搜索“可执行文件”）"><a href="#which-（搜索“可执行文件”）" class="headerlink" title="which      （搜索“可执行文件”）"></a>which      （搜索“可执行文件”）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">which [options] [--] programname [...]</div><div class="line">OPTIONS:</div><div class="line">-a, --all</div><div class="line">    将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称</div><div class="line">--skip-alias:</div><div class="line">    禁止显示别名</div><div class="line"></div><div class="line"></div><div class="line">范例一：搜索 ifconfig 这个指令的完整文件名</div><div class="line">[root@centos-rpi3 tmp]# which ifconfig</div><div class="line">/sbin/ifconfig</div><div class="line"></div><div class="line">范例二：用 which 去找出 which 的文件名</div><div class="line">[root@centos-rpi3 tmp]# which which</div><div class="line">alias which=&apos;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&apos;</div><div class="line">	/bin/alias</div><div class="line">	/usr/bin/which</div><div class="line"># alias 是命令别名</div><div class="line"></div><div class="line">范例三：请找出 history 这个指令的完整文件名</div><div class="line">[root@centos-rpi3 tmp]# which history</div><div class="line">/usr/bin/which: no history in (/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin)</div><div class="line"># history是“bash内置的指令”，但是 which 默认是找 PATH 内所规范的目录。所以当然搜寻不到</div></pre></td></tr></table></figure>
<p>这个命令是根据 “PATH” 这个环境变量所规范的路径，去搜索“可执行文件”的文件名。</p>
<h3 id="文件、文件名的搜索"><a href="#文件、文件名的搜索" class="headerlink" title="文件、文件名的搜索"></a>文件、文件名的搜索</h3><p>搜索文件时 find 不很常用，因为速度慢之外，也很损耗硬盘。一般我们都是先使用whereis 或者是 locate 来检查，如果真的找不到了，才以 find 来搜寻。whereis 只找系统中某些特定目录下面的文件而已，locate 则是利用数据库来搜寻文件名，当然两者就相当的快速， 并且没有实际的搜寻硬盘内的文件系统状态，比较省时间。</p>
<h4 id="whereis-（由一些特定的目录中寻找文件、文件名）"><a href="#whereis-（由一些特定的目录中寻找文件、文件名）" class="headerlink" title="whereis        （由一些特定的目录中寻找文件、文件名）"></a>whereis        （由一些特定的目录中寻找文件、文件名）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">whereis [options] [-BMS directory... -f] name...</div><div class="line">OPTION:</div><div class="line">-l :可以列出 whereis 会去查询的几个主要目录而已</div><div class="line">-b :只找 binary 格式的文件</div><div class="line">-m :只找在说明文档 manual 路径下的文件</div><div class="line">-s :只找 source 来源文件</div><div class="line">-u :搜寻不在上述三个项目当中的其他特殊文件</div><div class="line"></div><div class="line">范例一：请找出 ifconfig 这个文件名</div><div class="line">[root@centos-rpi3 tmp]# whereis ifconfig</div><div class="line">ifconfig: /usr/sbin/ifconfig /usr/share/man/man8/ifconfig.8.gz</div><div class="line"></div><div class="line">范例二：只找出跟 passwd 有关的“说明文档”文件名 （man page）</div><div class="line">[root@centos-rpi3 tmp]# whereis passwd      # 列出全部的文件名</div><div class="line">passwd: /usr/bin/passwd /etc/passwd /usr/share/man/man1/passwd.1.gz</div><div class="line">[root@centos-rpi3 tmp]# whereis -m passwd   # 只有在 man 里面的文件名才列出来</div><div class="line">passwd: /usr/share/man/man1/passwd.1.gz</div></pre></td></tr></table></figure>
<p><em>whereis 主要是针对 /bin /sbin 下面的可执行文件， 以及 /usr/share/man 下面的 man page 文件，跟几个比较特定的目录来处理</em></p>
<p><em>要知道 whereis 到底查了多少目录？可以使用 whereis -l 来查看。</em></p>
<h4 id="locate-updatedb"><a href="#locate-updatedb" class="headerlink" title="locate / updatedb"></a>locate / updatedb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">locate  -   按名称查找文件</div><div class="line"></div><div class="line"> locate [OPTION]... PATTERN...</div><div class="line"></div><div class="line">OPTION：</div><div class="line">-i，--ignore-case</div><div class="line">    忽略大小写的差异；</div><div class="line">-c，--count</div><div class="line">    不输出文件名，仅计算找到的文件数量</div><div class="line">-l， --limit, -n LIMIT</div><div class="line">    仅输出几行的意思，例如输出五行则是 -l 5</div><div class="line">-S，, --statistics</div><div class="line">    输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件/目录数量等</div><div class="line">-r，--regexp REGEXP</div><div class="line">    后面可接正则表达式的显示方式</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">范例一：找出系统中所有与 passwd 相关的文件名，且只列出5个</div><div class="line">[xiangcl@VM_0_26_centos ~]$ locate -l 5 passwd</div><div class="line">/etc/passwd</div><div class="line">/etc/passwd-</div><div class="line">/etc/pam.d/passwd</div><div class="line">/etc/security/opasswd</div><div class="line">/root/node-v6.2.0/deps/openssl/openssl/apps/passwd.c</div><div class="line"></div><div class="line">范例二：列出 locate 查询所使用的数据库文件之文件名与各数据数量</div><div class="line">[xiangcl@VM_0_26_centos ~]$ locate -S</div><div class="line">数据库 /var/lib/mlocate/mlocate.db:</div><div class="line">	18,507 文件夹                     # 总记录目录数</div><div class="line">	120,727 文件                      # 总记录文件数</div><div class="line">	7,442,050 文件名中的字节数</div><div class="line">	2,959,140 字节用于存储数据库</div></pre></td></tr></table></figure>
<p><em>忘记某个文件的完整文件名时，可以使用locate</em></p>
<p><em>locate 寻找的数据是由“已创建的数据库 /var/lib/mlocate/” 里面的数据所搜寻到的，所以不用直接在去硬盘当中存取数据</em></p>
<p><em>使用locate会有限制，因为他是经由数据库来搜寻的，而数据库的创建默认是在每天执行一次 （ 每个 distribution 都不同，CentOS 7.x 是每天更新数据库一次！） ，所以当你新创建起来的文件， 却还在数据库更新之前搜寻该文件，那么 locate 会告诉你“找不到！”。因为必须更新数据库</em></p>
<p><em>更新 locate 数据库的方法非常简单，直接输入“updatedb ”就可以了！ updatedb 指令会去读取 /etc/updatedb.conf 这个配置文件的设置，然后再去硬盘里面进行搜寻文件名的动作， 最后就更新整个数据库文件啰！因为 updatedb 会去搜寻硬盘，所以当你执行 updatedb 时，可能会等待数分钟的时间喔！</em></p>
<h5 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h5><ul>
<li>updatedb：根据 /etc/updatedb.conf 的设置去搜寻系统硬盘内的文件名，并更新<br>/var/lib/mlocate 内的数据库文件；</li>
<li>locate：依据 /var/lib/mlocate 内的数据库记载，找出使用者输入的关键字文件名。</li>
</ul>
<h4 id="find-递归地在层次目录中处理文件"><a href="#find-递归地在层次目录中处理文件" class="headerlink" title="find   (递归地在层次目录中处理文件)"></a>find   (递归地在层次目录中处理文件)</h4><p>概述：实事查找工具，通过便利指定路径下的文件系统完成文件查找</p>
<p>特点：</p>
<ul>
<li>查找速度略慢</li>
<li>精确查找</li>
<li>实事查找</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">find [OPTION]... [查找路径] [查找条件] [处理动作]</div><div class="line">    查找路径： 指定具体目标路径；默认为当前目录；</div><div class="line">    查找条件： 指定的查找标准，可以文件名、大小、类型、权限等标准进行；默认为找出指定路径下的所有文件；</div><div class="line">    处理动作： 对符合条件的文件做什么操作；默认输出至屏幕；</div><div class="line"></div><div class="line">查找条件：</div><div class="line">    根据文件名查找：</div><div class="line">        -name “文件名”</div><div class="line">        -iname “文件名”：不区分字母大小写</div><div class="line">        -regex &quot;PATTERN&quot;：以PATTERN（文件名与正则表达式）匹配整个文件路径字符串，而不仅仅是文件名称；</div><div class="line"></div><div class="line">    根据属主、属组查找：</div><div class="line">    	-user USERNAME：查找属主为指定用户的文件；</div><div class="line">    	-group GRPNAME: 查找属组为指定组的文件；</div><div class="line"></div><div class="line">    	-uid UserID：查找属主为指定的UID号的文件；</div><div class="line">    	-gid GroupID：查找属组为指定的GID号的文件；</div><div class="line"></div><div class="line">    	-nouser：查找没有属主的文件；</div><div class="line">    	-nogroup：查找没有属组的文件；</div><div class="line"></div><div class="line">    根据文件类型查找：</div><div class="line">		-type TYPE:</div><div class="line">			f: 普通文件</div><div class="line">			d: 目录文件</div><div class="line">			l: 符号链接文件</div><div class="line">			s：套接字文件</div><div class="line">			b: 块设备文件</div><div class="line">			c: 字符设备文件</div><div class="line">			p: 管道文件</div><div class="line"></div><div class="line">	组合条件：</div><div class="line">		与：-a</div><div class="line">		或：-o</div><div class="line">		非：-not, !</div><div class="line"></div><div class="line">		!A -a !B = !(A -o B)</div><div class="line">		!A -o !B = !(A -a B)</div><div class="line"></div><div class="line">		范例：找出/tmp目录下，属主不是root，且文件名不是fstab的文件；</div><div class="line">			find /tmp \( -not -user root -a -not -name &apos;fstab&apos; \) -ls</div><div class="line">			find /tmp -not \( -user root -o -name &apos;fstab&apos; \) -ls</div><div class="line">            # 加上 -ls ，是查找并显示结果</div><div class="line"></div><div class="line">	根据文件大小来查找：(示意图如下：find指令文件大小范围示意图)</div><div class="line">		-size [+|-]#UNIT</div><div class="line">			常用单位：k, M, G</div><div class="line"></div><div class="line">			#UNIT: (#-1, #]</div><div class="line">			-#UNIT：[0,#-1]</div><div class="line">			+#UNIT：(#,oo)</div><div class="line"></div><div class="line">	根据时间戳：(示意图如下：find指令时间戳范围示意图)</div><div class="line">		以“天”为单位；</div><div class="line">			-atime [+|-]#,</div><div class="line">				#: [#,#+1)</div><div class="line">				+#: [#+1,oo]</div><div class="line">				-#: [0,#)</div><div class="line">			-mtime</div><div class="line">			-ctime</div><div class="line"></div><div class="line">		以“分钟”为单位：</div><div class="line">			-amin</div><div class="line">			-mmin</div><div class="line">			-cmin</div><div class="line"></div><div class="line">	根据权限查找：</div><div class="line">		-perm [/|-]MODE</div><div class="line">			MODE: 精确权限匹配</div><div class="line">			/MODE：任何一类(u,g,o)对象的权限中只要能一位匹配即可；</div><div class="line">			-MODE：每一类对象都必须同时拥有为其指定的权限标准；</div><div class="line"></div><div class="line">处理动作：</div><div class="line">	-print：默认的处理动作，显示至屏幕；</div><div class="line">	-ls：类似于对查找到的文件执行“ls -l”命令；</div><div class="line">	-delete：删除查找到的文件；</div><div class="line">	-fls /path/to/somefile：查找到的所有文件的长格式信息保存至指定文件中；</div><div class="line">	-ok COMMAND &#123;&#125; \; 对查找到的每个文件执行由COMMAND指定的命令；</div><div class="line">		对于每个文件执行命令之前，都会交互式要求用户确认；</div><div class="line">	-exec COMMAND &#123;&#125; \; 对查找到的每个文件执行由COMMAND指定的命令;</div><div class="line">		&#123;&#125;: 用于引用查找到的文件名称自身；</div><div class="line"></div><div class="line">	注意：find传递查找到的文件至后面指定的命令时，查找到所有符合条件的文件一次性传递给后面的命令；</div><div class="line">	有些命令不能接受过多参数，此时命令执行可能会失败；另一种方式可规避此问题：</div><div class="line">		find | xargs COMMAND</div><div class="line"></div><div class="line">范例一：将过去系统上24小时内有更动过内容（mtime）的文件列出</div><div class="line">[root@centos-rpi3 ~]# find / -mtime 0</div><div class="line"># 那个 0 是重点！0 代表目前的时间，所以，从现在开始到 24 小时前，</div><div class="line"># 有变动过内容的文件都会被列出来！那如果是三天前呢？</div><div class="line"># find / -mtime 3 有变动过的文件都被列出的意思！</div><div class="line"></div><div class="line">范例二：寻找 /etc 下面的文件，如果文件日期比 /etc/passwd 新就列出</div><div class="line">[root@centos-rpi3 ~]# find /etc -newer /etc/passwd</div><div class="line"># -newer 用在分辨两个文件之间的新旧关系是很有用的。</div></pre></td></tr></table></figure>
<h5 id="find指令文件大小范围示意图"><a href="#find指令文件大小范围示意图" class="headerlink" title="find指令文件大小范围示意图"></a>find指令文件大小范围示意图</h5><p><img src="http://xiangclimg-10066880.cos.myqcloud.com/find1.png" alt=""></p>
<h5 id="find指令时间戳范围示意图"><a href="#find指令时间戳范围示意图" class="headerlink" title="find指令时间戳范围示意图"></a>find指令时间戳范围示意图</h5><p><img src="http://xiangclimg-10066880.cos.myqcloud.com/find2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件和目录的默认权限与隐藏权限&quot;&gt;&lt;a href=&quot;#文件和目录的默认权限与隐藏权限&quot; class=&quot;headerlink&quot; title=&quot;文件和目录的默认权限与隐藏权限&quot;&gt;&lt;/a&gt;文件和目录的默认权限与隐藏权限&lt;/h2&gt;&lt;h3 id=&quot;文件默认权限：-umask
    
    </summary>
    
      <category term="Linux" scheme="http://xiangcl.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="Linux基础" scheme="http://xiangcl.com/tags/Linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>yum:CentOS包管理工具</title>
    <link href="http://xiangcl.com/tool-config/yum-centos-package-tool.html"/>
    <id>http://xiangcl.com/tool-config/yum-centos-package-tool.html</id>
    <published>2017-05-18T09:02:42.514Z</published>
    <updated>2017-05-18T09:02:42.514Z</updated>
    
    <content type="html"><![CDATA[<p>##Linux系统的包管理工具</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1.自动处理依赖性关系</p>
<p>2.简化安装过程</p>
<h2 id="包管理器的分类"><a href="#包管理器的分类" class="headerlink" title="包管理器的分类"></a>包管理器的分类</h2><ul>
<li>CentOS<ul>
<li>yum</li>
</ul>
</li>
<li>Ubuntu<ul>
<li>apt</li>
</ul>
</li>
</ul>
<h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>yum [options] [command] [package ...]
</code></pre><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><pre><code>-h：显示帮助信息；
-e 静默执行 
-t 忽略错误
-R[分钟] 设置等待时间
-y 自动应答yes
</code></pre><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><h4 id="清除yum缓存"><a href="#清除yum缓存" class="headerlink" title="清除yum缓存"></a>清除yum缓存</h4><pre><code>$ yum check               #检查 RPM 数据库问题
$ yum check-update        #检查是否有可用的软件包更新

$ yum clean packages      #清除临时包文件（/var/cache/yum 下文件）
$ yum clean headers       #清除rpm头文件
$ yum clean all           #清除全部
</code></pre><h4 id="搜索与检查要安装的包"><a href="#搜索与检查要安装的包" class="headerlink" title="搜索与检查要安装的包"></a>搜索与检查要安装的包</h4><pre><code>$ yum search php    #搜索和php相关的包
$ yum info php-common   #查看`php-common`这个包的具体的信息
$ yum deplist php-common    #查看`php-common`的依赖
$ yum search all php    #加上了包的详细描述
</code></pre><h5 id="yum-info-php-common"><a href="#yum-info-php-common" class="headerlink" title="yum info php-common"></a><code>yum info php-common</code></h5><p><img src="http://i.imgur.com/NjKIE7r.png" alt=""></p>
<h5 id="yum-deplist-php-common"><a href="#yum-deplist-php-common" class="headerlink" title="yum deplist php-common"></a><code>yum deplist php-common</code></h5><p><img src="http://i.imgur.com/XHxAOkT.png" alt=""></p>
<h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><pre><code>$ sudo yum install php-cli  #安装`php-cli`
Is this ok [y/d/N]: y
或者:
如果确定要安装这个包后，直接使用:
$ sudo yum install php-cli -y   #不用确认直接安装

$ php --help    #若出现php的相关帮助信息就证明安装成功
</code></pre><h4 id="升级包"><a href="#升级包" class="headerlink" title="升级包"></a>升级包</h4><pre><code>$ yum check-update  #检测可升级的包
$ sudo yum install  #更新所有的包
$ sudo yum upgrade python   #升级python这个包
</code></pre><h4 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a>删除包</h4><pre><code>$ yum list installed    #查看系统当前都安装了哪些包
$ yum list installed | grep php     #仅仅显示和php相关的包
$ sudo yum remove php-common    #删除php-common这个包
$ yum list installed | grep php     #再次搜索与php相关的包
</code></pre><h5 id="sudo-yum-remove-php-common"><a href="#sudo-yum-remove-php-common" class="headerlink" title="sudo yum remove php-common"></a><code>sudo yum remove php-common</code></h5><p><img src="http://i.imgur.com/Hm9FJlf.png" alt=""></p>
<p><img src="http://i.imgur.com/fybaBjt.png" alt=""></p>
<h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><pre><code>$ yum repolist      #列出系统启用的仓库列表
$ yum search epel       #搜索和`epel`相关的包
$ sudo yum epel-release -y      #安装`epel-release`
$ yum repolist      #列出仓库列表
$ yum list available        #查看所有可用的包
$ sudo yum install https://centos7.iuscommunity.org/ius-release.rpm     #直接指定地址安装`ius`仓库的包
$ yum list available | grep php     #列出所有和php相关的包
$ yum info php70u-common        #查看`php70u-common`包的详细信息
</code></pre><h5 id="yum-repolist"><a href="#yum-repolist" class="headerlink" title="yum repolist"></a><code>yum repolist</code></h5><p><img src="http://i.imgur.com/6ZexIqk.png" alt=""></p>
<h5 id="yum-search-epel"><a href="#yum-search-epel" class="headerlink" title="yum search epel"></a><code>yum search epel</code></h5><p><img src="http://i.imgur.com/xaXQEUa.png" alt=""></p>
<h3 id="主要介绍了CentOS下yum的包管理方式，以及一些yum常用的命令。因为主要使用的CentOS系统。"><a href="#主要介绍了CentOS下yum的包管理方式，以及一些yum常用的命令。因为主要使用的CentOS系统。" class="headerlink" title="主要介绍了CentOS下yum的包管理方式，以及一些yum常用的命令。因为主要使用的CentOS系统。"></a>主要介绍了CentOS下<code>yum</code>的包管理方式，以及一些yum常用的命令。因为主要使用的CentOS系统。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Linux系统的包管理工具&lt;/p&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;p&gt;1.自动处理依赖性关系&lt;/p&gt;
&lt;p&gt;2.简化安装过程&lt;/p&gt;
&lt;h2 id=&quot;包管理器的分类
    
    </summary>
    
      <category term="工具配置" scheme="http://xiangcl.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Linux" scheme="http://xiangcl.com/tags/Linux/"/>
    
      <category term="yum" scheme="http://xiangcl.com/tags/yum/"/>
    
      <category term="CentOS" scheme="http://xiangcl.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>HTML+CSS之盒模型经典布局</title>
    <link href="http://xiangcl.com/web-front-end/html-css-box-model.html"/>
    <id>http://xiangcl.com/web-front-end/html-css-box-model.html</id>
    <published>2017-05-18T09:02:42.510Z</published>
    <updated>2017-05-18T09:02:42.510Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css核心内容——流"><a href="#css核心内容——流" class="headerlink" title="css核心内容——流"></a>css核心内容——流</h2><h3 id="标准流-非标准流"><a href="#标准流-非标准流" class="headerlink" title="标准流/非标准流"></a>标准流/非标准流</h3><ul>
<li>流：在现实生活中就是流水，在网页设计中就是指元素（标签）的排列方式（默认情况下，我们的元素，向网页的左上角流动）；</li>
<li>标准流：元素在网页中就像流水，排在前面的元素（标签）内容在前面出现，排在后面的元素在后面出现。</li>
<li>非标准流：当某个标签脱离了标准流（比如因为相对定位）排列，我们统称为非标准流排列。</li>
</ul>
<h2 id="css核心类容——盒子模型"><a href="#css核心类容——盒子模型" class="headerlink" title="css核心类容——盒子模型"></a>css核心类容——盒子模型</h2><h3 id="盒子模型-概念"><a href="#盒子模型-概念" class="headerlink" title="盒子模型-概念"></a>盒子模型-概念</h3><ul>
<li>要搞清楚盒子模型就必须先明白下面几个概念：</li>
<li><p>在网页设计中常听到的属性名：内容（content）、填充（padding）、边框（border）、边界（margin），css盒子模型都举杯这些属性。</p>
</li>
<li><p><img src="http://i.imgur.com/3t2TA1K.png" alt=""></p>
</li>
</ul>
<h4 id="盒子模型经典案例1："><a href="#盒子模型经典案例1：" class="headerlink" title="盒子模型经典案例1："></a>盒子模型经典案例1：</h4><ul>
<li>实际效果：<ul>
<li><img src="http://i.imgur.com/SgBg1DB.png" alt=""></li>
</ul>
</li>
<li><p>代码：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;盒子模型&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        #div-box1 {
            width:200px;
            height:200px;
            background-color:pink;
            border:1px solid red;
            margin-top:10px;
            margin-left:20px;
            padding-top:20px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;div-box1&quot;&gt;hello,world!&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></li>
<li><p>对应的盒子大概的样子：</p>
<ul>
<li><img src="http://i.imgur.com/xLxCWEJ.png" alt=""></li>
</ul>
</li>
</ul>
<h4 id="盒子模型的经典案例2："><a href="#盒子模型的经典案例2：" class="headerlink" title="盒子模型的经典案例2："></a>盒子模型的经典案例2：</h4><ul>
<li><p>实际效果：</p>
<ul>
<li><img src="http://i.imgur.com/FVzVBlc.png" alt=""></li>
</ul>
</li>
<li><p>代码：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;盒子模型经典案例-优酷牛人&lt;/title&gt;
    &lt;style type=&quot;text/css&quot;&gt;
        *{
            margin: 0;
            padding:0;
        }
        #div-box1{
            width:600px;
            height:500px;
            border:1px solid #ccc;
            margin:20px 0 0 50px;
        }
        .faceul{
            list-style-type:none;
        }
        .faceul li{
            width:80px;
            height:100px;
            border:1px solid red;
            margin:10px 0 0 10px;
            float:left;
        }
        .faceul img{
            width:70px;
            margin:5px 0  0 5px;

        }
        .faceul span{
            font-size:small;
            margin: 2px 0 0 25px;
            display:block;
        }
        .faceul a:link{
            color:black;
            text-decoration:none;
        }
        .faceul a:hover{
            color:red;
            text-decoration:underline;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id=&quot;div-box1&quot;&gt;
        &lt;ul class=&quot;faceul&quot;&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src=&quot;ali.jpg&quot;&gt;&lt;span&gt;&lt;a href=&quot;#&quot;&gt;阿狸&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;

        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css核心内容——流&quot;&gt;&lt;a href=&quot;#css核心内容——流&quot; class=&quot;headerlink&quot; title=&quot;css核心内容——流&quot;&gt;&lt;/a&gt;css核心内容——流&lt;/h2&gt;&lt;h3 id=&quot;标准流-非标准流&quot;&gt;&lt;a href=&quot;#标准流-非标准流&quot; cla
    
    </summary>
    
      <category term="Web前端" scheme="http://xiangcl.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Web前端" scheme="http://xiangcl.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html+css" scheme="http://xiangcl.com/tags/html-css/"/>
    
  </entry>
  
</feed>
